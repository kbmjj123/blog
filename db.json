{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/miho/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/miho/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/miho/source/js/animate.js","path":"js/animate.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/pace.min.js","path":"js/pace.min.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/particles.js","path":"js/particles.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/pop-img.js","path":"js/pop-img.js","modified":1,"renderable":1},{"_id":"themes/miho/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/miho/source/images/alipay.png","path":"images/alipay.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/alipay_code.png","path":"images/alipay_code.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/banner.jpg","path":"images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/miho/source/images/logo.png","path":"images/logo.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/scrollbar_arrow.png","path":"images/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/wechat.png","path":"images/wechat.png","modified":1,"renderable":1},{"_id":"themes/miho/source/images/wechat_code.png","path":"images/wechat_code.png","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/code-rule-mag.md","hash":"ce25dc4e98d94a524ae8a7a1f337c09de7e4cf60","modified":1615188226126},{"_id":"source/_posts/css-study-structure.md","hash":"75d8eb3c4e5b8cfda41093c04416d92369d2bd9d","modified":1615518473215},{"_id":"source/_posts/hello-world.md","hash":"f4b946380b9ba2187e483386dafec1fecd702d05","modified":1615138868036},{"_id":"source/_posts/hexo-github-netify.md","hash":"5ad17e18103e549f3c07f066d677c144ca26a445","modified":1615138697480},{"_id":"source/_posts/exec-immediately-func.md","hash":"b9738627381e4c849694a608538f0b4a097e33fe","modified":1615777711680},{"_id":"source/_posts/js-basic-data-type.md","hash":"d2e766ac14589e5f02052ca7b774a215622d3c0f","modified":1615288901207},{"_id":"source/_posts/setTimeout-setInterval.md","hash":"3bd4f8773131db46b890e222078483d8e9d7027d","modified":1615365260212},{"_id":"source/_posts/verdaccio-custom-npm.md","hash":"0ccfc418a790f1749aa358002db8708bf97bddf4","modified":1615187271949},{"_id":"source/about/index.md","hash":"1dcbf859cc947489fd6f01e84ba1f5bcf8895b27","modified":1614995655027},{"_id":"themes/miho/README.md","hash":"de6e76535a9e139fd570e1951bf0d8040521b643","modified":1614942167640},{"_id":"themes/miho/_config.yml","hash":"6a9c0c7f02bf367f4c982e4a722ae4940686ce67","modified":1615778788791},{"_id":"themes/miho/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1614829851291},{"_id":"themes/miho/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1614829851291},{"_id":"themes/miho/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1614829851292},{"_id":"themes/miho/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1614829851292},{"_id":"themes/miho/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1614829851292},{"_id":"themes/miho/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1614829851292},{"_id":"themes/miho/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1614829851292},{"_id":"themes/miho/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1614829851298},{"_id":"themes/miho/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1614829851299},{"_id":"themes/miho/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1614829851299},{"_id":"themes/miho/layout/layout.ejs","hash":"c7bc9638fffb722e1482ff00d57b7fe9a779e775","modified":1614829851299},{"_id":"themes/miho/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1614829851299},{"_id":"themes/miho/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1614829851299},{"_id":"themes/miho/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1614829851299},{"_id":"themes/miho/_source/about/index.md","hash":"6a4bf76a332be137de52cd37b99fcca34bd8b783","modified":1614829851291},{"_id":"themes/miho/_source/blog/installation-configuration.md","hash":"e9e694595cb65621ce32395d5799da15a2b49217","modified":1614829851291},{"_id":"themes/miho/layout/_partial/after-footer.ejs","hash":"a37bf70fa94fd3b8df30e2455c8586342c1b5a7a","modified":1614829851293},{"_id":"themes/miho/layout/_partial/archive-post.ejs","hash":"d215a432321b19882fdf1a0f3ca73c226ac2f64c","modified":1614829851293},{"_id":"themes/miho/layout/_partial/archive.ejs","hash":"c3fe9a160155da6ebc00ee05ae0b33f48f212737","modified":1614829851293},{"_id":"themes/miho/layout/_partial/article.ejs","hash":"56eafac8c3fcf840016f30e1b8fa7a21f5c4552c","modified":1615135443986},{"_id":"themes/miho/layout/_partial/footer.ejs","hash":"a0555a1be966cdf3b5504581ef6fd4710e7b4ebd","modified":1614966664270},{"_id":"themes/miho/layout/_partial/head.ejs","hash":"4b18ef48f5963031de30d438a0f521689d277de9","modified":1614829851294},{"_id":"themes/miho/layout/_partial/header.ejs","hash":"e38d2f2934cf542f118a8078390c1b162597e1da","modified":1614964987653},{"_id":"themes/miho/layout/_partial/mobile-nav.ejs","hash":"fa334fc205973aadf596784e2708a9549708fad7","modified":1614829851294},{"_id":"themes/miho/layout/_partial/search.ejs","hash":"5e581b7dcd32cfc767674a2846afcbe670256ca2","modified":1614829851297},{"_id":"themes/miho/layout/_partial/sidebar.ejs","hash":"8cd454900e964b88f1a850c455e7df34df396a70","modified":1614829851298},{"_id":"themes/miho/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1614829851298},{"_id":"themes/miho/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1614829851298},{"_id":"themes/miho/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1614829851298},{"_id":"themes/miho/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1614829851298},{"_id":"themes/miho/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1614829851298},{"_id":"themes/miho/source/css/_extend.styl","hash":"2e13084404cf231512f2637a1efaa63cb9949068","modified":1614829851300},{"_id":"themes/miho/source/css/_variables.styl","hash":"1d42ead7ebb3968e9d50e3eb9b868bec645f686c","modified":1614964472087},{"_id":"themes/miho/source/css/style.styl","hash":"38ce101a4e904db24620febbda105c5b5335b106","modified":1614829851306},{"_id":"themes/miho/source/js/animate.js","hash":"d5cf7dc4ad33b02bea74bb76d3eba85b67e907ce","modified":1614829851310},{"_id":"themes/miho/source/favicon.ico","hash":"2e6f1e55913d54a9b1fc52f866e14cb44108fb00","modified":1614965241821},{"_id":"themes/miho/source/js/main.js","hash":"cae44d65bd63b29a749fcf43cea26d3b0cb8b2ef","modified":1614829851310},{"_id":"themes/miho/source/js/pace.min.js","hash":"d32ab818e0f97d3b0c80f5631fc23d8a0cb52795","modified":1614829851310},{"_id":"themes/miho/source/js/particles.js","hash":"8009af99d913d8c40509efaecfa5e56cefefbf0d","modified":1614829851310},{"_id":"themes/miho/source/js/pop-img.js","hash":"8e638e492b9699da1b9ca22d9f74a6578712925a","modified":1614829851311},{"_id":"themes/miho/source/js/search.js","hash":"ae4b06fd09a090a5388fd880bba919a1c0c64dd3","modified":1614829851311},{"_id":"themes/miho/source/images/alipay.png","hash":"b3f9db844b1e522fc55125302f2979f50a6d0529","modified":1614829851307},{"_id":"themes/miho/source/images/logo.png","hash":"118227816e1438c5c09479f538385224b6afc3de","modified":1614964620480},{"_id":"themes/miho/source/images/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1614829851308},{"_id":"themes/miho/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1614829851296},{"_id":"themes/miho/layout/_partial/post/copyright.ejs","hash":"8f6069e311908089f8b2851f0ce01c50f1418ee0","modified":1614829851296},{"_id":"themes/miho/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1614829851296},{"_id":"themes/miho/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1614829851296},{"_id":"themes/miho/source/images/wechat.png","hash":"8de97bf5bb3f3a0845e02172f79d6bba2fb6bb3b","modified":1614829851309},{"_id":"themes/miho/layout/_partial/post/nav.ejs","hash":"f2dc6b9c72396fdb1a1e082760c909d4102972d4","modified":1614829851296},{"_id":"themes/miho/layout/_partial/post/reward.ejs","hash":"d34668484a425eddbe2fb97481b9f75bd0baa803","modified":1614968344990},{"_id":"themes/miho/layout/_partial/post/share.ejs","hash":"6f78a06e7192544a7b422697d5c988824320b7c7","modified":1614829851297},{"_id":"themes/miho/layout/_partial/post/tag.ejs","hash":"85c8e80fd158e282e0cae15f087515cb8bc89feb","modified":1614829851297},{"_id":"themes/miho/layout/_partial/post/title.ejs","hash":"5d9e385aad26fbfcb2a1d59c74469525907087f3","modified":1615106734090},{"_id":"themes/miho/layout/_partial/post/toc.ejs","hash":"eb81e0bcedaf12afc3b38f0096bf669ae27ec723","modified":1614967869164},{"_id":"themes/miho/source/css/_partial/archive.styl","hash":"ede0d1652892d3bcbec38752060945106a6eb9e8","modified":1614829851300},{"_id":"themes/miho/source/css/_partial/article.styl","hash":"4483028d421fb668f66c66604c258d6a1e540bca","modified":1615186969890},{"_id":"themes/miho/source/css/_partial/comment.styl","hash":"d0f38e19a43094fb8b9c6d84c52ec91030e2e881","modified":1614829851300},{"_id":"themes/miho/source/css/_partial/footer.styl","hash":"d71916880dee26532c502b0735500a43837ca284","modified":1614829851301},{"_id":"themes/miho/source/css/_partial/header.styl","hash":"242081cee3ffe1511cd4755987bf239a4aef34b1","modified":1614965574767},{"_id":"themes/miho/source/css/_partial/highlight.styl","hash":"dd97dae3d0a349e5460b58fec408392f2b265fd8","modified":1614829851301},{"_id":"themes/miho/source/css/_partial/mobile.styl","hash":"17de8a444f05d2d5b96a8b88a6ba48baefa70f94","modified":1614829851301},{"_id":"themes/miho/source/css/_partial/pace.styl","hash":"c70eea98b2cc347ea5fec333b107a564422b7f8f","modified":1614829851301},{"_id":"themes/miho/source/css/_partial/post.styl","hash":"378f5cb4e76889604d68c7c82ccbee335a0e97cf","modified":1614829851301},{"_id":"themes/miho/source/css/_partial/reward.styl","hash":"2424fed591c0655a6452126de64e4e918b11e244","modified":1614994210381},{"_id":"themes/miho/source/css/_partial/scroll.styl","hash":"be3dae89bec0da8a4249b7bb07be0f7383859167","modified":1614829851302},{"_id":"themes/miho/source/css/_partial/share.styl","hash":"7d6a5ad5eddfa84ba47dc7c2cec9f2efa458cccb","modified":1614829851302},{"_id":"themes/miho/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1614829851302},{"_id":"themes/miho/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1614829851302},{"_id":"themes/miho/source/css/_partial/sidebar.styl","hash":"eb2d3d33148fed6ef9d0540b9a7c19d964d359a6","modified":1614829851302},{"_id":"themes/miho/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1614829851303},{"_id":"themes/miho/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1614829851303},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1614829851304},{"_id":"themes/miho/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1614829851304},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1614829851306},{"_id":"themes/miho/layout/_partial/plugins/analytics/baidu-analytics.ejs","hash":"b21500b87d79a0068e3ca0408b4e125e3e749d01","modified":1614829851294},{"_id":"themes/miho/layout/_partial/plugins/analytics/cnzz-analytics.ejs","hash":"87050e9063edebfe88f9766fc3430b2eac90c6ff","modified":1614829851295},{"_id":"themes/miho/layout/_partial/plugins/analytics/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1614829851295},{"_id":"themes/miho/layout/_partial/plugins/comments/gitment.ejs","hash":"13d15872b734a92c26b757fc9170ad5bc04b5ceb","modified":1614829851295},{"_id":"themes/miho/layout/_partial/plugins/comments/changyan.ejs","hash":"23bc1544520a5376339ea9286f3177ce605da3fa","modified":1614829851295},{"_id":"themes/miho/layout/_partial/plugins/comments/wangyiyun.ejs","hash":"7245dacec0177d8fa1249e7cbee872c534e96dc9","modified":1614829851295},{"_id":"themes/miho/layout/_partial/plugins/comments/youyan.ejs","hash":"82b529c0df6bea5c098d147baa6201e6b295fc1b","modified":1614829851295},{"_id":"themes/miho/layout/_partial/plugins/sites/visit.ejs","hash":"a5daff983fb14472998bce00d0d113e303eddb19","modified":1614829851295},{"_id":"themes/miho/source/images/wechat_code.png","hash":"4335a4084e892f06f8ab3df8ab2dbbdcfb16b337","modified":1614965838927},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1614829851306},{"_id":"themes/miho/source/images/alipay_code.png","hash":"7cbe82133719c35fd72f6fe0895b784888bf0439","modified":1614965855129},{"_id":"themes/miho/source/images/banner.jpg","hash":"d50db83315f62bc360c92147a292223401e2e5db","modified":1614823543123},{"_id":"themes/miho/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1614829851305}],"Category":[{"name":"前端","_id":"ckma98uer0005in09hj4v1l1g"},{"name":"积累与沉淀","_id":"ckma98uev0009in09boz3f5m1"},{"name":"css","parent":"ckma98uer0005in09hj4v1l1g","_id":"ckma98uf2000gin09fyy259ql"},{"name":"javascript","parent":"ckma98uer0005in09hj4v1l1g","_id":"ckma98uf5000nin09fguxaj1o"},{"name":"编码与管理","parent":"ckma98uev0009in09boz3f5m1","_id":"ckma98uf6000sin09csda0bab"},{"name":"自定义服务","parent":"ckma98uev0009in09boz3f5m1","_id":"ckma98uf8000xin099njihq5s"},{"name":"基础","parent":"ckma98uf5000nin09fguxaj1o","_id":"ckma98ufb001bin09awlx4y6a"}],"Data":[],"Page":[{"title":"关于我","date":"2021-03-06T01:47:48.000Z","_content":"### 关于我\n原来从事安卓开发，后转从事 WEB 开发，主要开发语言 `java`, `javascript`，熟悉使用 `vue`、`react`、`react-native` 等主流框架；\n\n对`服务端`、`前端`、`数据分析`等技能有所了解。\n\n### 关于工作\n城市：`广州`\n### 关于学习\n正在往终身学习者前进...\n近期学习方向：大前端全栈\n### 关于座右铭\n> 不是井里没有水，而是你挖的不够深\n\n### 关于爱好\n热爱`运动`，尤其喜爱`篮球`、`跳绳`、`电影（Top250）`、`旅行`。\n### 联系我\n* Home: [91temaichang.com](https://91temaichang.com)\n* Blog: [blog.minhow.com](http://91temaichang.com)\n* Email: kbmjj123@gmail.com\n* GitHub: [MinHow](https://github.com/kbmjj123)\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2021-03-06 09:47:48\n---\n### 关于我\n原来从事安卓开发，后转从事 WEB 开发，主要开发语言 `java`, `javascript`，熟悉使用 `vue`、`react`、`react-native` 等主流框架；\n\n对`服务端`、`前端`、`数据分析`等技能有所了解。\n\n### 关于工作\n城市：`广州`\n### 关于学习\n正在往终身学习者前进...\n近期学习方向：大前端全栈\n### 关于座右铭\n> 不是井里没有水，而是你挖的不够深\n\n### 关于爱好\n热爱`运动`，尤其喜爱`篮球`、`跳绳`、`电影（Top250）`、`旅行`。\n### 联系我\n* Home: [91temaichang.com](https://91temaichang.com)\n* Blog: [blog.minhow.com](http://91temaichang.com)\n* Email: kbmjj123@gmail.com\n* GitHub: [MinHow](https://github.com/kbmjj123)\n","updated":"2021-03-06T01:54:15.027Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckma98uef0000in090u7p2m2m","content":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>原来从事安卓开发，后转从事 WEB 开发，主要开发语言 <code>java</code>, <code>javascript</code>，熟悉使用 <code>vue</code>、<code>react</code>、<code>react-native</code> 等主流框架；</p>\n<p>对<code>服务端</code>、<code>前端</code>、<code>数据分析</code>等技能有所了解。</p>\n<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><p>城市：<code>广州</code></p>\n<h3 id=\"关于学习\"><a href=\"#关于学习\" class=\"headerlink\" title=\"关于学习\"></a>关于学习</h3><p>正在往终身学习者前进…<br>近期学习方向：大前端全栈</p>\n<h3 id=\"关于座右铭\"><a href=\"#关于座右铭\" class=\"headerlink\" title=\"关于座右铭\"></a>关于座右铭</h3><blockquote>\n<p>不是井里没有水，而是你挖的不够深</p>\n</blockquote>\n<h3 id=\"关于爱好\"><a href=\"#关于爱好\" class=\"headerlink\" title=\"关于爱好\"></a>关于爱好</h3><p>热爱<code>运动</code>，尤其喜爱<code>篮球</code>、<code>跳绳</code>、<code>电影（Top250）</code>、<code>旅行</code>。</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><ul>\n<li>Home: <a href=\"https://91temaichang.com/\">91temaichang.com</a></li>\n<li>Blog: <a href=\"http://91temaichang.com/\">blog.minhow.com</a></li>\n<li>Email: <a href=\"mailto:&#x6b;&#98;&#x6d;&#x6a;&#x6a;&#x31;&#x32;&#x33;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;\">&#x6b;&#98;&#x6d;&#x6a;&#x6a;&#x31;&#x32;&#x33;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></li>\n<li>GitHub: <a href=\"https://github.com/kbmjj123\">MinHow</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h3><p>原来从事安卓开发，后转从事 WEB 开发，主要开发语言 <code>java</code>, <code>javascript</code>，熟悉使用 <code>vue</code>、<code>react</code>、<code>react-native</code> 等主流框架；</p>\n<p>对<code>服务端</code>、<code>前端</code>、<code>数据分析</code>等技能有所了解。</p>\n<h3 id=\"关于工作\"><a href=\"#关于工作\" class=\"headerlink\" title=\"关于工作\"></a>关于工作</h3><p>城市：<code>广州</code></p>\n<h3 id=\"关于学习\"><a href=\"#关于学习\" class=\"headerlink\" title=\"关于学习\"></a>关于学习</h3><p>正在往终身学习者前进…<br>近期学习方向：大前端全栈</p>\n<h3 id=\"关于座右铭\"><a href=\"#关于座右铭\" class=\"headerlink\" title=\"关于座右铭\"></a>关于座右铭</h3><blockquote>\n<p>不是井里没有水，而是你挖的不够深</p>\n</blockquote>\n<h3 id=\"关于爱好\"><a href=\"#关于爱好\" class=\"headerlink\" title=\"关于爱好\"></a>关于爱好</h3><p>热爱<code>运动</code>，尤其喜爱<code>篮球</code>、<code>跳绳</code>、<code>电影（Top250）</code>、<code>旅行</code>。</p>\n<h3 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h3><ul>\n<li>Home: <a href=\"https://91temaichang.com/\">91temaichang.com</a></li>\n<li>Blog: <a href=\"http://91temaichang.com/\">blog.minhow.com</a></li>\n<li>Email: <a href=\"mailto:&#x6b;&#98;&#x6d;&#x6a;&#x6a;&#x31;&#x32;&#x33;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;\">&#x6b;&#98;&#x6d;&#x6a;&#x6a;&#x31;&#x32;&#x33;&#64;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#x6d;</a></li>\n<li>GitHub: <a href=\"https://github.com/kbmjj123\">MinHow</a></li>\n</ul>\n"}],"Post":[{"title":"玩转CSS","author":"Zhenggl","date":"2021-03-12T02:48:00.000Z","cover_picture":"https://img.91temaichang.com/blog/css-structure.jpeg","top":1,"_content":"\n\n关于CSS学习的路线架构图，长期维护更新，每次添加的文章，都会已这个作为文章的目录\n![玩转CSS架构图](https://img.91temaichang.com/blog/playCSS.png)\n\n\n### 一、[准备篇]()\n### 二、[基础篇]()\n### 三、[进阶篇]()\n### 四、[技巧篇]()\n### 五、[实战篇]()\n### 六、[总结篇]()\n","source":"_posts/css-study-structure.md","raw":"---\ntitle: 玩转CSS\nauthor: Zhenggl\ndate: 2021-03-12 10:48:00\ncategories:\n  - [前端, css]\ntags:\n  - css\n\ncover_picture: https://img.91temaichang.com/blog/css-structure.jpeg\ntop: 1\n---\n\n\n关于CSS学习的路线架构图，长期维护更新，每次添加的文章，都会已这个作为文章的目录\n![玩转CSS架构图](https://img.91temaichang.com/blog/playCSS.png)\n\n\n### 一、[准备篇]()\n### 二、[基础篇]()\n### 三、[进阶篇]()\n### 四、[技巧篇]()\n### 五、[实战篇]()\n### 六、[总结篇]()\n","slug":"css-study-structure","published":1,"updated":"2021-03-12T03:07:53.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98uej0001in092iva8uc6","content":"<p>关于CSS学习的路线架构图，长期维护更新，每次添加的文章，都会已这个作为文章的目录<br><img src=\"https://img.91temaichang.com/blog/playCSS.png\" alt=\"玩转CSS架构图\"></p>\n<h3 id=\"一、准备篇\"><a href=\"#一、准备篇\" class=\"headerlink\" title=\"一、准备篇\"></a>一、<a href=\"\">准备篇</a></h3><h3 id=\"二、基础篇\"><a href=\"#二、基础篇\" class=\"headerlink\" title=\"二、基础篇\"></a>二、<a href=\"\">基础篇</a></h3><h3 id=\"三、进阶篇\"><a href=\"#三、进阶篇\" class=\"headerlink\" title=\"三、进阶篇\"></a>三、<a href=\"\">进阶篇</a></h3><h3 id=\"四、技巧篇\"><a href=\"#四、技巧篇\" class=\"headerlink\" title=\"四、技巧篇\"></a>四、<a href=\"\">技巧篇</a></h3><h3 id=\"五、实战篇\"><a href=\"#五、实战篇\" class=\"headerlink\" title=\"五、实战篇\"></a>五、<a href=\"\">实战篇</a></h3><h3 id=\"六、总结篇\"><a href=\"#六、总结篇\" class=\"headerlink\" title=\"六、总结篇\"></a>六、<a href=\"\">总结篇</a></h3>","site":{"data":{}},"excerpt":"","more":"<p>关于CSS学习的路线架构图，长期维护更新，每次添加的文章，都会已这个作为文章的目录<br><img src=\"https://img.91temaichang.com/blog/playCSS.png\" alt=\"玩转CSS架构图\"></p>\n<h3 id=\"一、准备篇\"><a href=\"#一、准备篇\" class=\"headerlink\" title=\"一、准备篇\"></a>一、<a href=\"\">准备篇</a></h3><h3 id=\"二、基础篇\"><a href=\"#二、基础篇\" class=\"headerlink\" title=\"二、基础篇\"></a>二、<a href=\"\">基础篇</a></h3><h3 id=\"三、进阶篇\"><a href=\"#三、进阶篇\" class=\"headerlink\" title=\"三、进阶篇\"></a>三、<a href=\"\">进阶篇</a></h3><h3 id=\"四、技巧篇\"><a href=\"#四、技巧篇\" class=\"headerlink\" title=\"四、技巧篇\"></a>四、<a href=\"\">技巧篇</a></h3><h3 id=\"五、实战篇\"><a href=\"#五、实战篇\" class=\"headerlink\" title=\"五、实战篇\"></a>五、<a href=\"\">实战篇</a></h3><h3 id=\"六、总结篇\"><a href=\"#六、总结篇\" class=\"headerlink\" title=\"六、总结篇\"></a>六、<a href=\"\">总结篇</a></h3>"},{"title":"编码规范","author":"Zhenggl","date":"2021-03-08T07:05:10.000Z","cover_picture":"https://img.91temaichang.com/blog/code-rule.jpeg","_content":"\n### 一、css规范\n\n#### 1.1 css命名规则\n    1. class 必须单词全字母小写，单词间以 - 分隔。\n    2. class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。\n####  1.2 属性顺序\n1. 位置属性(position、top、right、z-index、display、float等)；\n2. 大小(width, height, padding, margin等)；\n2. 文字系列(font、line-height、letter-spacing、color、text-align等)；\n2. 背景(background、border等)；\n2. 其他(animation、transition等)\n```css\n\t.declaration-order {\n\t  /* Positioning */\n\t  position: absolute;\n\t  top: 0;\n\t  right: 0;\n\t  bottom: 0;\n\t  left: 0;\n\t  z-index: 100;\n\t  \n\t  /* Box-model */\n\t  display: block;\n\t  float: right;\n\t  width: 100px;\n\t  height: 100px;\n\t\n\t  /* Typography */\n\t  font: normal 13px \"Helvetica Neue\", sans-serif;\n\t  line-height: 1.5;\n\t  color: #333;\n\t  text-align: center;\n\t\n\t  /* Visual */\n\t  background-color: #f5f5f5;\n\t  border: 1px solid #e5e5e5;\n\t  border-radius: 3px;\n\t\n\t  /* Misc */\n\t  opacity: 1;\n\t}\n```\n####  1.3 选择器如无必要\n不得为 id、class 选择器添加类型选择器进行限定，在性能和维护性上，都有一定的影响。\n```css\n\t/* 推荐*/\n\t#error,\n\t.danger-message {\n\t    font-color: #c00;\n\t}\n\n\t/* 不推荐*/\n\tdialog#error,\n\tp.danger-message {\n\t    font-color: #c00;\n\t}\n```\n#### 1.4 多个选择器公用相同属性时\n```css\n/* 推荐 */\n\t.post,\n\t.page,\n\t.comment {\n\t    line-height: 1.5;\n\t}\n\t\n\t/* 不推荐 */\n\t.post, .page, .comment {\n\t    line-height: 1.5;\n\t}\n```\n### 二、JS规范\n#### 2.1 文件命名\n文件夹和文件名的命名应该能代表代码功能，与后端一致为佳。\n#### 2.2 语言规范\n1. 变量\n声明变量必须加上 let、const、var 关键字.\n当你没有写 let、const、var, 变量就会暴露在全局上下文中, 这样很可能会和现有变量冲突. 另外, 如果没有加上, 很难明确该变量的作用域是什么,\n变量也很可能像在局部作用域中, 很轻易地泄漏到 Document 或者 Window 中, 所以务必用 let、const 、var去声明变量.\n\n2. 分号\n总是使用分号\n如果仅依靠语句间的隐式分隔, 有时会很麻烦. 你自己更能清楚哪里是语句的起止,而且有些情况下，漏掉分号会很危险。\n\n3. for-in 循环\n最好只用于 object/map/hash 的遍历\n对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值.\n例如：给原型添加属性之后，默认情况下枚举，最后输出1234513\n```javascript\nfunction getNewArrayTwo(){\n\t\tvar array=[1,2,3,4,5 ];\n\t\tArray.prototype.age=13;\n\t\tvar result=[];\n\t\tfor(var i in array){\n\t      result.push(array[i]);\n\t\t}\n\t\talert(result.join(''));\n\t  }\n```\n\n### 三、编码风格\n3.1 明确作用域\n任何时候都要明确作用域 – 提高可移植性和清晰度. 例如, 不要依赖于作用域链中的 window 对象.\n可能在其他应用中, 你函数中的 window 不是指之前的那个窗口对象。\n\n3.2 代码格式化\n数组和对象的初始化,如果初始值不是很长, 就保持写在单行上:\n```javascript\nvar arr = [1, 2, 3];  // No space after [ or before ].\nvar obj = {a: 1, b: 2, c: 3};  // No space after { or before }.\n     初始值占用多行时, 缩进2个空格.\n    // Object initializer.\n\tvar inset = {\n\t  top: 10,\n\t  right: 20,\n\t  bottom: 15,\n\t  left: 12\n\t};\n\t\n\t// Array initializer.\n\tthis.rows_ = [\n\t  '\"Slartibartfast\" <fjordmaster@magrathea.com>',\n\t  '\"Zaphod Beeblebrox\" <theprez@universe.gov>',\n\t  '\"Ford Prefect\" <ford@theguide.com>',\n\t  '\"Arthur Dent\" <has.no.tea@gmail.com>',\n\t  '\"Marvin the Paranoid Android\" <marv@googlemail.com>',\n\t  'the.mice@magrathea.com'\n\t];\n```\n3.3 引号的使用\n单引号 (‘) 优于双引号 (“).\n当你创建一个包含 HTML 代码的字符串时就知道它的好处了。\n\n3.4 过长的单行予以换行\n换行应选择在操作符和标点符号之后。\n```javascript\n     if (oUser.nAge < 30\n\t    && oUser.bIsChecked === true\n\t    || oUser.sName === 'admin') {\n\t    // code\n\t}\n```\n### 四、vue规范\n#### 4.1 vue属性书写顺序\n```javascript\nexport default {\n   //不要忘记了 name 属性\n    name: 'RangeSlider',\n    //组合其它组件\n    extends: {},\n    //组件属性、变量\n    props: {\n            bar: {}, // 按字母顺序\n            foo: {},\n            fooBar: {},\n        },\n    // 变量\n    data() {},\n    computed: {},\n    //使用其它组件\n    components: {},\n    // 方法\n    watch: {},\n    methods: {},\n    // 生命周期函数\n    beforeCreate() {},\n    mounted() {},\n}\n```\n#### 4.2组件\n组件以驼峰命名  以及书写顺序\n```html\n    <template>\n\t  <my-components></my-components>\n    </template>\n\t<script>\n\t  import myComponents from './myComponents.vue'\n\t\n\t  export default {\n\t  components: {\n\t      myComponents\n\t    }\n\t  }\n\t</script>\n```\n#### 4.3 组件引用\n```javascript\n  import myComponentsA from './myComponentsA.vue'  \n  import myComponentsB from './myComponentsB.vue'\n  import myComponentsC from './myComponentsC.vue'\n  import myComponentsD from './myComponentsD.vue'\n  export default {\n    components: {\n      myComponentsA,\n      myComponentsB,\n      myComponentsC,\n      myComponentsD,\n    }\n  }\n```\n#### 4.4 事件\n```html\n    <!-- 不建议 -->\n\t<a v-on:click=\"pass()\">pass</a>\n\t\n\t<!-- 推荐 -->\n\t<a @click=\"pass\">pass</a>\n```\n#### 4.5 vue页面使用每个 vue 页面中的最外层template下面只能有一个标签\n```html\n\t// error\n\t<template>\n\t    <div></div>\n\t    <div></div>\n\t</template>\n\n\t// right\n\t<template>\n\t    <div></div>\n\t</template>\n```\n## 4.6 vue返回上一页\n```html\nthis.$router.go(-1) //就可以回到上一页。\nhistory.go(-1) //是回到浏览器上一页，但是由于Vue应用是单页应用，浏览器的访问历史未必和Vue的浏览历史相同。\n```\n#### 4.7 通过路由跳转，传递查询内容\n```javascript\nthis.$router.push({\n    path: \"/path\",\n    query:{query:queryThings}\n})\n```\n#### 4.8 methods 自定义方法命名\n\n1. 动宾短语（good：jumpPage、openCarInfoDialog）（bad：go、nextPage、show、open、login）\n2. ajax 方法以 get、post 开头，以 data 结尾（good：getListData、postFormData）（bad：takeData、confirmData、getList、postForm）\n3. 事件方法以 on 开头（onTypeChange、onUsernameInput）\n4. init、refresh 单词除外\n5. 尽量使用常用单词开头（set、get、open、close、jump）\n6. 驼峰命名（good: getListData）（bad: get_list_data、getlistData）\n\n#### 4.9 路由的命名\npath和name使用相同的命名\n```json\n     示例：{\n        path: '/merchandise', //路由路径\n        icon: 'key', //icon图标\n        name: 'merchandise', //路由名称\n        title: '商品', //路由标题\n        access: 0, //权限代码\n        component: main,\n        children: [\n            { path: 'merchandise-pubish', title: '商品发布', name: 'merchandise-pubish', component: () => import('@/views/merchandise/pubish.vue') },\n        ]\n    }\n```\n\n\n### 五、注释规范\n#### 5.1 页面注释规范\n  页面中使用注释划分结构块，注意与css中的注释达成统一格式。\n```html\n    <!-- 头部 -->\n\t<div class=\"g-hd\">\n\t    <!-- LOGO -->\n\t    <h1 class=\"m-logo\"><a hred=\"#\">LOGO</a></h1>\n\t    <!-- /LOGO -->\n\t    <!-- 导航 -->\n\t    <ul class=\"m-nav\">\n\t        <li><a hred=\"#\">NAV1</a></li>\n\t        <li><a hred=\"#\">NAV2</a></li>\n\t    </ul>\n\t    <!-- /导航 -->\n\t</div>\n\t<!-- /头部 -->\n```\n#### 5.2 函数注释\n```javascript\n    /**\n\t * 简述\n\t *\n\t * 功能详细描述\n\t *\n\t * @param <String> arg1 参数1\n\t * @param <Number> arg2 参数2，默认为0\n\t * @return <Boolean> 判断xxx是否成功\n\t */\n\t function fooFunction (arg1, arg2) {\n\t    // code\n\t }\n```\n#### 5.3语句注释\n```javascript\n    #单独一行 //(双斜线)与注释文字之间保留一个空格；\n    #在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格；\n    #//(双斜线)与代码之间保留一个空格。\n   \n\t// 调用了一个函数；1)单独在一行\n\tsetTitle();\n\tvar maxCount = 10; // 设置最大量；2)在代码后面注释\n\t// setName(); // 3)注释代码\n```\n","source":"_posts/code-rule-mag.md","raw":"---\ntitle: 编码规范\nauthor: Zhenggl\ndate: 2021-03-08 15:05:10\ncategories:\n  - [积累与沉淀, 编码与管理]\ntags:\n  - 编码规范\n  - javascript\n  - css\ncover_picture: https://img.91temaichang.com/blog/code-rule.jpeg\n---\n\n### 一、css规范\n\n#### 1.1 css命名规则\n    1. class 必须单词全字母小写，单词间以 - 分隔。\n    2. class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。\n####  1.2 属性顺序\n1. 位置属性(position、top、right、z-index、display、float等)；\n2. 大小(width, height, padding, margin等)；\n2. 文字系列(font、line-height、letter-spacing、color、text-align等)；\n2. 背景(background、border等)；\n2. 其他(animation、transition等)\n```css\n\t.declaration-order {\n\t  /* Positioning */\n\t  position: absolute;\n\t  top: 0;\n\t  right: 0;\n\t  bottom: 0;\n\t  left: 0;\n\t  z-index: 100;\n\t  \n\t  /* Box-model */\n\t  display: block;\n\t  float: right;\n\t  width: 100px;\n\t  height: 100px;\n\t\n\t  /* Typography */\n\t  font: normal 13px \"Helvetica Neue\", sans-serif;\n\t  line-height: 1.5;\n\t  color: #333;\n\t  text-align: center;\n\t\n\t  /* Visual */\n\t  background-color: #f5f5f5;\n\t  border: 1px solid #e5e5e5;\n\t  border-radius: 3px;\n\t\n\t  /* Misc */\n\t  opacity: 1;\n\t}\n```\n####  1.3 选择器如无必要\n不得为 id、class 选择器添加类型选择器进行限定，在性能和维护性上，都有一定的影响。\n```css\n\t/* 推荐*/\n\t#error,\n\t.danger-message {\n\t    font-color: #c00;\n\t}\n\n\t/* 不推荐*/\n\tdialog#error,\n\tp.danger-message {\n\t    font-color: #c00;\n\t}\n```\n#### 1.4 多个选择器公用相同属性时\n```css\n/* 推荐 */\n\t.post,\n\t.page,\n\t.comment {\n\t    line-height: 1.5;\n\t}\n\t\n\t/* 不推荐 */\n\t.post, .page, .comment {\n\t    line-height: 1.5;\n\t}\n```\n### 二、JS规范\n#### 2.1 文件命名\n文件夹和文件名的命名应该能代表代码功能，与后端一致为佳。\n#### 2.2 语言规范\n1. 变量\n声明变量必须加上 let、const、var 关键字.\n当你没有写 let、const、var, 变量就会暴露在全局上下文中, 这样很可能会和现有变量冲突. 另外, 如果没有加上, 很难明确该变量的作用域是什么,\n变量也很可能像在局部作用域中, 很轻易地泄漏到 Document 或者 Window 中, 所以务必用 let、const 、var去声明变量.\n\n2. 分号\n总是使用分号\n如果仅依靠语句间的隐式分隔, 有时会很麻烦. 你自己更能清楚哪里是语句的起止,而且有些情况下，漏掉分号会很危险。\n\n3. for-in 循环\n最好只用于 object/map/hash 的遍历\n对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值.\n例如：给原型添加属性之后，默认情况下枚举，最后输出1234513\n```javascript\nfunction getNewArrayTwo(){\n\t\tvar array=[1,2,3,4,5 ];\n\t\tArray.prototype.age=13;\n\t\tvar result=[];\n\t\tfor(var i in array){\n\t      result.push(array[i]);\n\t\t}\n\t\talert(result.join(''));\n\t  }\n```\n\n### 三、编码风格\n3.1 明确作用域\n任何时候都要明确作用域 – 提高可移植性和清晰度. 例如, 不要依赖于作用域链中的 window 对象.\n可能在其他应用中, 你函数中的 window 不是指之前的那个窗口对象。\n\n3.2 代码格式化\n数组和对象的初始化,如果初始值不是很长, 就保持写在单行上:\n```javascript\nvar arr = [1, 2, 3];  // No space after [ or before ].\nvar obj = {a: 1, b: 2, c: 3};  // No space after { or before }.\n     初始值占用多行时, 缩进2个空格.\n    // Object initializer.\n\tvar inset = {\n\t  top: 10,\n\t  right: 20,\n\t  bottom: 15,\n\t  left: 12\n\t};\n\t\n\t// Array initializer.\n\tthis.rows_ = [\n\t  '\"Slartibartfast\" <fjordmaster@magrathea.com>',\n\t  '\"Zaphod Beeblebrox\" <theprez@universe.gov>',\n\t  '\"Ford Prefect\" <ford@theguide.com>',\n\t  '\"Arthur Dent\" <has.no.tea@gmail.com>',\n\t  '\"Marvin the Paranoid Android\" <marv@googlemail.com>',\n\t  'the.mice@magrathea.com'\n\t];\n```\n3.3 引号的使用\n单引号 (‘) 优于双引号 (“).\n当你创建一个包含 HTML 代码的字符串时就知道它的好处了。\n\n3.4 过长的单行予以换行\n换行应选择在操作符和标点符号之后。\n```javascript\n     if (oUser.nAge < 30\n\t    && oUser.bIsChecked === true\n\t    || oUser.sName === 'admin') {\n\t    // code\n\t}\n```\n### 四、vue规范\n#### 4.1 vue属性书写顺序\n```javascript\nexport default {\n   //不要忘记了 name 属性\n    name: 'RangeSlider',\n    //组合其它组件\n    extends: {},\n    //组件属性、变量\n    props: {\n            bar: {}, // 按字母顺序\n            foo: {},\n            fooBar: {},\n        },\n    // 变量\n    data() {},\n    computed: {},\n    //使用其它组件\n    components: {},\n    // 方法\n    watch: {},\n    methods: {},\n    // 生命周期函数\n    beforeCreate() {},\n    mounted() {},\n}\n```\n#### 4.2组件\n组件以驼峰命名  以及书写顺序\n```html\n    <template>\n\t  <my-components></my-components>\n    </template>\n\t<script>\n\t  import myComponents from './myComponents.vue'\n\t\n\t  export default {\n\t  components: {\n\t      myComponents\n\t    }\n\t  }\n\t</script>\n```\n#### 4.3 组件引用\n```javascript\n  import myComponentsA from './myComponentsA.vue'  \n  import myComponentsB from './myComponentsB.vue'\n  import myComponentsC from './myComponentsC.vue'\n  import myComponentsD from './myComponentsD.vue'\n  export default {\n    components: {\n      myComponentsA,\n      myComponentsB,\n      myComponentsC,\n      myComponentsD,\n    }\n  }\n```\n#### 4.4 事件\n```html\n    <!-- 不建议 -->\n\t<a v-on:click=\"pass()\">pass</a>\n\t\n\t<!-- 推荐 -->\n\t<a @click=\"pass\">pass</a>\n```\n#### 4.5 vue页面使用每个 vue 页面中的最外层template下面只能有一个标签\n```html\n\t// error\n\t<template>\n\t    <div></div>\n\t    <div></div>\n\t</template>\n\n\t// right\n\t<template>\n\t    <div></div>\n\t</template>\n```\n## 4.6 vue返回上一页\n```html\nthis.$router.go(-1) //就可以回到上一页。\nhistory.go(-1) //是回到浏览器上一页，但是由于Vue应用是单页应用，浏览器的访问历史未必和Vue的浏览历史相同。\n```\n#### 4.7 通过路由跳转，传递查询内容\n```javascript\nthis.$router.push({\n    path: \"/path\",\n    query:{query:queryThings}\n})\n```\n#### 4.8 methods 自定义方法命名\n\n1. 动宾短语（good：jumpPage、openCarInfoDialog）（bad：go、nextPage、show、open、login）\n2. ajax 方法以 get、post 开头，以 data 结尾（good：getListData、postFormData）（bad：takeData、confirmData、getList、postForm）\n3. 事件方法以 on 开头（onTypeChange、onUsernameInput）\n4. init、refresh 单词除外\n5. 尽量使用常用单词开头（set、get、open、close、jump）\n6. 驼峰命名（good: getListData）（bad: get_list_data、getlistData）\n\n#### 4.9 路由的命名\npath和name使用相同的命名\n```json\n     示例：{\n        path: '/merchandise', //路由路径\n        icon: 'key', //icon图标\n        name: 'merchandise', //路由名称\n        title: '商品', //路由标题\n        access: 0, //权限代码\n        component: main,\n        children: [\n            { path: 'merchandise-pubish', title: '商品发布', name: 'merchandise-pubish', component: () => import('@/views/merchandise/pubish.vue') },\n        ]\n    }\n```\n\n\n### 五、注释规范\n#### 5.1 页面注释规范\n  页面中使用注释划分结构块，注意与css中的注释达成统一格式。\n```html\n    <!-- 头部 -->\n\t<div class=\"g-hd\">\n\t    <!-- LOGO -->\n\t    <h1 class=\"m-logo\"><a hred=\"#\">LOGO</a></h1>\n\t    <!-- /LOGO -->\n\t    <!-- 导航 -->\n\t    <ul class=\"m-nav\">\n\t        <li><a hred=\"#\">NAV1</a></li>\n\t        <li><a hred=\"#\">NAV2</a></li>\n\t    </ul>\n\t    <!-- /导航 -->\n\t</div>\n\t<!-- /头部 -->\n```\n#### 5.2 函数注释\n```javascript\n    /**\n\t * 简述\n\t *\n\t * 功能详细描述\n\t *\n\t * @param <String> arg1 参数1\n\t * @param <Number> arg2 参数2，默认为0\n\t * @return <Boolean> 判断xxx是否成功\n\t */\n\t function fooFunction (arg1, arg2) {\n\t    // code\n\t }\n```\n#### 5.3语句注释\n```javascript\n    #单独一行 //(双斜线)与注释文字之间保留一个空格；\n    #在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格；\n    #//(双斜线)与代码之间保留一个空格。\n   \n\t// 调用了一个函数；1)单独在一行\n\tsetTitle();\n\tvar maxCount = 10; // 设置最大量；2)在代码后面注释\n\t// setName(); // 3)注释代码\n```\n","slug":"code-rule-mag","published":1,"updated":"2021-03-08T07:23:46.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98uen0002in09134p0y96","content":"<h3 id=\"一、css规范\"><a href=\"#一、css规范\" class=\"headerlink\" title=\"一、css规范\"></a>一、css规范</h3><h4 id=\"1-1-css命名规则\"><a href=\"#1-1-css命名规则\" class=\"headerlink\" title=\"1.1 css命名规则\"></a>1.1 css命名规则</h4><pre><code>1. class 必须单词全字母小写，单词间以 - 分隔。\n2. class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。\n</code></pre>\n<h4 id=\"1-2-属性顺序\"><a href=\"#1-2-属性顺序\" class=\"headerlink\" title=\"1.2 属性顺序\"></a>1.2 属性顺序</h4><ol>\n<li><p>位置属性(position、top、right、z-index、display、float等)；</p>\n</li>\n<li><p>大小(width, height, padding, margin等)；</p>\n</li>\n<li><p>文字系列(font、line-height、letter-spacing、color、text-align等)；</p>\n</li>\n<li><p>背景(background、border等)；</p>\n</li>\n<li><p>其他(animation、transition等)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.declaration-order</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Positioning */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* Box-model */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Typography */</span></span><br><span class=\"line\">  <span class=\"attribute\">font</span>: normal <span class=\"number\">13px</span> <span class=\"string\">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Visual */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e5e5e5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Misc */</span></span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-选择器如无必要\"><a href=\"#1-3-选择器如无必要\" class=\"headerlink\" title=\"1.3 选择器如无必要\"></a>1.3 选择器如无必要</h4><p>不得为 id、class 选择器添加类型选择器进行限定，在性能和维护性上，都有一定的影响。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>-<span class=\"attribute\">color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不推荐*/</span></span><br><span class=\"line\">dialog<span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>-<span class=\"attribute\">color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-多个选择器公用相同属性时\"><a href=\"#1-4-多个选择器公用相同属性时\" class=\"headerlink\" title=\"1.4 多个选择器公用相同属性时\"></a>1.4 多个选择器公用相同属性时</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\">\t<span class=\"selector-class\">.post</span>,</span><br><span class=\"line\">\t<span class=\"selector-class\">.page</span>,</span><br><span class=\"line\">\t<span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\">\t<span class=\"selector-class\">.post</span>, <span class=\"selector-class\">.page</span>, <span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、JS规范\"><a href=\"#二、JS规范\" class=\"headerlink\" title=\"二、JS规范\"></a>二、JS规范</h3><h4 id=\"2-1-文件命名\"><a href=\"#2-1-文件命名\" class=\"headerlink\" title=\"2.1 文件命名\"></a>2.1 文件命名</h4><p>文件夹和文件名的命名应该能代表代码功能，与后端一致为佳。</p>\n<h4 id=\"2-2-语言规范\"><a href=\"#2-2-语言规范\" class=\"headerlink\" title=\"2.2 语言规范\"></a>2.2 语言规范</h4></li>\n<li><p>变量<br>声明变量必须加上 let、const、var 关键字.<br>当你没有写 let、const、var, 变量就会暴露在全局上下文中, 这样很可能会和现有变量冲突. 另外, 如果没有加上, 很难明确该变量的作用域是什么,<br>变量也很可能像在局部作用域中, 很轻易地泄漏到 Document 或者 Window 中, 所以务必用 let、const 、var去声明变量.</p>\n</li>\n<li><p>分号<br>总是使用分号<br>如果仅依靠语句间的隐式分隔, 有时会很麻烦. 你自己更能清楚哪里是语句的起止,而且有些情况下，漏掉分号会很危险。</p>\n</li>\n<li><p>for-in 循环<br>最好只用于 object/map/hash 的遍历<br>对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值.<br>例如：给原型添加属性之后，默认情况下枚举，最后输出1234513</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArrayTwo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> array=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> ];</span><br><span class=\"line\">\t\t<span class=\"built_in\">Array</span>.prototype.age=<span class=\"number\">13</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result=[];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> array)&#123;</span><br><span class=\"line\">\t      result.push(array[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\talert(result.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">\t  &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"三、编码风格\"><a href=\"#三、编码风格\" class=\"headerlink\" title=\"三、编码风格\"></a>三、编码风格</h3><p>3.1 明确作用域<br>任何时候都要明确作用域 – 提高可移植性和清晰度. 例如, 不要依赖于作用域链中的 window 对象.<br>可能在其他应用中, 你函数中的 window 不是指之前的那个窗口对象。</p>\n<p>3.2 代码格式化<br>数组和对象的初始化,如果初始值不是很长, 就保持写在单行上:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];  <span class=\"comment\">// No space after [ or before ].</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>&#125;;  <span class=\"comment\">// No space after &#123; or before &#125;.</span></span><br><span class=\"line\">     初始值占用多行时, 缩进<span class=\"number\">2</span>个空格.</span><br><span class=\"line\">    <span class=\"comment\">// Object initializer.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> inset = &#123;</span><br><span class=\"line\">\t  top: <span class=\"number\">10</span>,</span><br><span class=\"line\">\t  right: <span class=\"number\">20</span>,</span><br><span class=\"line\">\t  bottom: <span class=\"number\">15</span>,</span><br><span class=\"line\">\t  left: <span class=\"number\">12</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Array initializer.</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.rows_ = [</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Slartibartfast&quot; &lt;fjordmaster@magrathea.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Zaphod Beeblebrox&quot; &lt;theprez@universe.gov&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Ford Prefect&quot; &lt;ford@theguide.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Arthur Dent&quot; &lt;has.no.tea@gmail.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Marvin the Paranoid Android&quot; &lt;marv@googlemail.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;the.mice@magrathea.com&#x27;</span></span><br><span class=\"line\">\t];</span><br></pre></td></tr></table></figure>\n<p>3.3 引号的使用<br>单引号 (‘) 优于双引号 (“).<br>当你创建一个包含 HTML 代码的字符串时就知道它的好处了。</p>\n<p>3.4 过长的单行予以换行<br>换行应选择在操作符和标点符号之后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (oUser.nAge &lt; <span class=\"number\">30</span></span><br><span class=\"line\">    &amp;&amp; oUser.bIsChecked === <span class=\"literal\">true</span></span><br><span class=\"line\">    || oUser.sName === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、vue规范\"><a href=\"#四、vue规范\" class=\"headerlink\" title=\"四、vue规范\"></a>四、vue规范</h3><h4 id=\"4-1-vue属性书写顺序\"><a href=\"#4-1-vue属性书写顺序\" class=\"headerlink\" title=\"4.1 vue属性书写顺序\"></a>4.1 vue属性书写顺序</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//不要忘记了 name 属性</span></span><br><span class=\"line\">    name: <span class=\"string\">&#x27;RangeSlider&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//组合其它组件</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">//组件属性、变量</span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">            bar: &#123;&#125;, <span class=\"comment\">// 按字母顺序</span></span><br><span class=\"line\">            foo: &#123;&#125;,</span><br><span class=\"line\">            fooBar: &#123;&#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    computed: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">//使用其它组件</span></span><br><span class=\"line\">    components: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 方法</span></span><br><span class=\"line\">    watch: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2组件\"><a href=\"#4-2组件\" class=\"headerlink\" title=\"4.2组件\"></a>4.2组件</h4><p>组件以驼峰命名  以及书写顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-components</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-components</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> myComponents <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponents.vue&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">      myComponents</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-组件引用\"><a href=\"#4-3-组件引用\" class=\"headerlink\" title=\"4.3 组件引用\"></a>4.3 组件引用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponentsA <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsA.vue&#x27;</span>  </span><br><span class=\"line\"><span class=\"keyword\">import</span> myComponentsB <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsB.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myComponentsC <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsC.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myComponentsD <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsD.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    myComponentsA,</span><br><span class=\"line\">    myComponentsB,</span><br><span class=\"line\">    myComponentsC,</span><br><span class=\"line\">    myComponentsD,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-事件\"><a href=\"#4-4-事件\" class=\"headerlink\" title=\"4.4 事件\"></a>4.4 事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- 不建议 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;pass()&quot;</span>&gt;</span>pass<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span>pass<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-5-vue页面使用每个-vue-页面中的最外层template下面只能有一个标签\"><a href=\"#4-5-vue页面使用每个-vue-页面中的最外层template下面只能有一个标签\" class=\"headerlink\" title=\"4.5 vue页面使用每个 vue 页面中的最外层template下面只能有一个标签\"></a>4.5 vue页面使用每个 vue 页面中的最外层template下面只能有一个标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// error</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// right</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-6-vue返回上一页\"><a href=\"#4-6-vue返回上一页\" class=\"headerlink\" title=\"4.6 vue返回上一页\"></a>4.6 vue返回上一页</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.go(-1) //就可以回到上一页。</span><br><span class=\"line\">history.go(-1) //是回到浏览器上一页，但是由于Vue应用是单页应用，浏览器的访问历史未必和Vue的浏览历史相同。</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-7-通过路由跳转，传递查询内容\"><a href=\"#4-7-通过路由跳转，传递查询内容\" class=\"headerlink\" title=\"4.7 通过路由跳转，传递查询内容\"></a>4.7 通过路由跳转，传递查询内容</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/path&quot;</span>,</span><br><span class=\"line\">    query:&#123;<span class=\"attr\">query</span>:queryThings&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-8-methods-自定义方法命名\"><a href=\"#4-8-methods-自定义方法命名\" class=\"headerlink\" title=\"4.8 methods 自定义方法命名\"></a>4.8 methods 自定义方法命名</h4><ol>\n<li>动宾短语（good：jumpPage、openCarInfoDialog）（bad：go、nextPage、show、open、login）</li>\n<li>ajax 方法以 get、post 开头，以 data 结尾（good：getListData、postFormData）（bad：takeData、confirmData、getList、postForm）</li>\n<li>事件方法以 on 开头（onTypeChange、onUsernameInput）</li>\n<li>init、refresh 单词除外</li>\n<li>尽量使用常用单词开头（set、get、open、close、jump）</li>\n<li>驼峰命名（good: getListData）（bad: get_list_data、getlistData）</li>\n</ol>\n<h4 id=\"4-9-路由的命名\"><a href=\"#4-9-路由的命名\" class=\"headerlink\" title=\"4.9 路由的命名\"></a>4.9 路由的命名</h4><p>path和name使用相同的命名</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 示例：&#123;</span><br><span class=\"line\">    path: &#x27;/merchandise&#x27;, //路由路径</span><br><span class=\"line\">    icon: &#x27;key&#x27;, //icon图标</span><br><span class=\"line\">    name: &#x27;merchandise&#x27;, //路由名称</span><br><span class=\"line\">    title: &#x27;商品&#x27;, //路由标题</span><br><span class=\"line\">    access: 0, //权限代码</span><br><span class=\"line\">    component: main,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        &#123; path: &#x27;merchandise-pubish&#x27;, title: &#x27;商品发布&#x27;, name: &#x27;merchandise-pubish&#x27;, component: () =&gt; import(&#x27;@/views/merchandise/pubish.vue&#x27;) &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"五、注释规范\"><a href=\"#五、注释规范\" class=\"headerlink\" title=\"五、注释规范\"></a>五、注释规范</h3><h4 id=\"5-1-页面注释规范\"><a href=\"#5-1-页面注释规范\" class=\"headerlink\" title=\"5.1 页面注释规范\"></a>5.1 页面注释规范</h4><p>  页面中使用注释划分结构块，注意与css中的注释达成统一格式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- 头部 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;g-hd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LOGO --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;m-logo&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hred</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>LOGO<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /LOGO --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导航 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;m-nav&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hred</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>NAV1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hred</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>NAV2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /导航 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- /头部 --&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-函数注释\"><a href=\"#5-2-函数注释\" class=\"headerlink\" title=\"5.2 函数注释\"></a>5.2 函数注释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 简述</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 功能详细描述</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param </span>&lt;String&gt; arg1 参数1</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param </span>&lt;Number&gt; arg2 参数2，默认为0</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return </span>&lt;Boolean&gt; 判断xxx是否成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fooFunction</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3语句注释\"><a href=\"#5-3语句注释\" class=\"headerlink\" title=\"5.3语句注释\"></a>5.3语句注释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   #单独一行 //(双斜线)与注释文字之间保留一个空格；</span><br><span class=\"line\">   #在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格；</span><br><span class=\"line\">   #//(双斜线)与代码之间保留一个空格。</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 调用了一个函数；1)单独在一行</span></span><br><span class=\"line\">setTitle();</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCount = <span class=\"number\">10</span>; <span class=\"comment\">// 设置最大量；2)在代码后面注释</span></span><br><span class=\"line\"><span class=\"comment\">// setName(); // 3)注释代码</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、css规范\"><a href=\"#一、css规范\" class=\"headerlink\" title=\"一、css规范\"></a>一、css规范</h3><h4 id=\"1-1-css命名规则\"><a href=\"#1-1-css命名规则\" class=\"headerlink\" title=\"1.1 css命名规则\"></a>1.1 css命名规则</h4><pre><code>1. class 必须单词全字母小写，单词间以 - 分隔。\n2. class 必须代表相应模块或部件的内容或功能，不得以样式信息进行命名。\n</code></pre>\n<h4 id=\"1-2-属性顺序\"><a href=\"#1-2-属性顺序\" class=\"headerlink\" title=\"1.2 属性顺序\"></a>1.2 属性顺序</h4><ol>\n<li><p>位置属性(position、top、right、z-index、display、float等)；</p>\n</li>\n<li><p>大小(width, height, padding, margin等)；</p>\n</li>\n<li><p>文字系列(font、line-height、letter-spacing、color、text-align等)；</p>\n</li>\n<li><p>背景(background、border等)；</p>\n</li>\n<li><p>其他(animation、transition等)</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.declaration-order</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* Positioning */</span></span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">100</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">/* Box-model */</span></span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Typography */</span></span><br><span class=\"line\">  <span class=\"attribute\">font</span>: normal <span class=\"number\">13px</span> <span class=\"string\">&quot;Helvetica Neue&quot;</span>, sans-serif;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Visual */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f5f5f5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#e5e5e5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">3px</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Misc */</span></span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-3-选择器如无必要\"><a href=\"#1-3-选择器如无必要\" class=\"headerlink\" title=\"1.3 选择器如无必要\"></a>1.3 选择器如无必要</h4><p>不得为 id、class 选择器添加类型选择器进行限定，在性能和维护性上，都有一定的影响。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>-<span class=\"attribute\">color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 不推荐*/</span></span><br><span class=\"line\">dialog<span class=\"selector-id\">#error</span>,</span><br><span class=\"line\"><span class=\"selector-tag\">p</span><span class=\"selector-class\">.danger-message</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>-<span class=\"attribute\">color</span>: <span class=\"number\">#c00</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"1-4-多个选择器公用相同属性时\"><a href=\"#1-4-多个选择器公用相同属性时\" class=\"headerlink\" title=\"1.4 多个选择器公用相同属性时\"></a>1.4 多个选择器公用相同属性时</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 推荐 */</span></span><br><span class=\"line\">\t<span class=\"selector-class\">.post</span>,</span><br><span class=\"line\">\t<span class=\"selector-class\">.page</span>,</span><br><span class=\"line\">\t<span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 不推荐 */</span></span><br><span class=\"line\">\t<span class=\"selector-class\">.post</span>, <span class=\"selector-class\">.page</span>, <span class=\"selector-class\">.comment</span> &#123;</span><br><span class=\"line\">\t    <span class=\"attribute\">line-height</span>: <span class=\"number\">1.5</span>;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"二、JS规范\"><a href=\"#二、JS规范\" class=\"headerlink\" title=\"二、JS规范\"></a>二、JS规范</h3><h4 id=\"2-1-文件命名\"><a href=\"#2-1-文件命名\" class=\"headerlink\" title=\"2.1 文件命名\"></a>2.1 文件命名</h4><p>文件夹和文件名的命名应该能代表代码功能，与后端一致为佳。</p>\n<h4 id=\"2-2-语言规范\"><a href=\"#2-2-语言规范\" class=\"headerlink\" title=\"2.2 语言规范\"></a>2.2 语言规范</h4></li>\n<li><p>变量<br>声明变量必须加上 let、const、var 关键字.<br>当你没有写 let、const、var, 变量就会暴露在全局上下文中, 这样很可能会和现有变量冲突. 另外, 如果没有加上, 很难明确该变量的作用域是什么,<br>变量也很可能像在局部作用域中, 很轻易地泄漏到 Document 或者 Window 中, 所以务必用 let、const 、var去声明变量.</p>\n</li>\n<li><p>分号<br>总是使用分号<br>如果仅依靠语句间的隐式分隔, 有时会很麻烦. 你自己更能清楚哪里是语句的起止,而且有些情况下，漏掉分号会很危险。</p>\n</li>\n<li><p>for-in 循环<br>最好只用于 object/map/hash 的遍历<br>对 Array 用 for-in 循环有时会出错. 因为它并不是从 0 到 length - 1 进行遍历, 而是所有出现在对象及其原型链的键值.<br>例如：给原型添加属性之后，默认情况下枚举，最后输出1234513</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArrayTwo</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> array=[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span> ];</span><br><span class=\"line\">\t\t<span class=\"built_in\">Array</span>.prototype.age=<span class=\"number\">13</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> result=[];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i <span class=\"keyword\">in</span> array)&#123;</span><br><span class=\"line\">\t      result.push(array[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\talert(result.join(<span class=\"string\">&#x27;&#x27;</span>));</span><br><span class=\"line\">\t  &#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"三、编码风格\"><a href=\"#三、编码风格\" class=\"headerlink\" title=\"三、编码风格\"></a>三、编码风格</h3><p>3.1 明确作用域<br>任何时候都要明确作用域 – 提高可移植性和清晰度. 例如, 不要依赖于作用域链中的 window 对象.<br>可能在其他应用中, 你函数中的 window 不是指之前的那个窗口对象。</p>\n<p>3.2 代码格式化<br>数组和对象的初始化,如果初始值不是很长, 就保持写在单行上:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];  <span class=\"comment\">// No space after [ or before ].</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;<span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">b</span>: <span class=\"number\">2</span>, <span class=\"attr\">c</span>: <span class=\"number\">3</span>&#125;;  <span class=\"comment\">// No space after &#123; or before &#125;.</span></span><br><span class=\"line\">     初始值占用多行时, 缩进<span class=\"number\">2</span>个空格.</span><br><span class=\"line\">    <span class=\"comment\">// Object initializer.</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> inset = &#123;</span><br><span class=\"line\">\t  top: <span class=\"number\">10</span>,</span><br><span class=\"line\">\t  right: <span class=\"number\">20</span>,</span><br><span class=\"line\">\t  bottom: <span class=\"number\">15</span>,</span><br><span class=\"line\">\t  left: <span class=\"number\">12</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Array initializer.</span></span><br><span class=\"line\">\t<span class=\"built_in\">this</span>.rows_ = [</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Slartibartfast&quot; &lt;fjordmaster@magrathea.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Zaphod Beeblebrox&quot; &lt;theprez@universe.gov&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Ford Prefect&quot; &lt;ford@theguide.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Arthur Dent&quot; &lt;has.no.tea@gmail.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;&quot;Marvin the Paranoid Android&quot; &lt;marv@googlemail.com&gt;&#x27;</span>,</span><br><span class=\"line\">\t  <span class=\"string\">&#x27;the.mice@magrathea.com&#x27;</span></span><br><span class=\"line\">\t];</span><br></pre></td></tr></table></figure>\n<p>3.3 引号的使用<br>单引号 (‘) 优于双引号 (“).<br>当你创建一个包含 HTML 代码的字符串时就知道它的好处了。</p>\n<p>3.4 过长的单行予以换行<br>换行应选择在操作符和标点符号之后。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">if</span> (oUser.nAge &lt; <span class=\"number\">30</span></span><br><span class=\"line\">    &amp;&amp; oUser.bIsChecked === <span class=\"literal\">true</span></span><br><span class=\"line\">    || oUser.sName === <span class=\"string\">&#x27;admin&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"四、vue规范\"><a href=\"#四、vue规范\" class=\"headerlink\" title=\"四、vue规范\"></a>四、vue规范</h3><h4 id=\"4-1-vue属性书写顺序\"><a href=\"#4-1-vue属性书写顺序\" class=\"headerlink\" title=\"4.1 vue属性书写顺序\"></a>4.1 vue属性书写顺序</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//不要忘记了 name 属性</span></span><br><span class=\"line\">    name: <span class=\"string\">&#x27;RangeSlider&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">//组合其它组件</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">//组件属性、变量</span></span><br><span class=\"line\">    props: &#123;</span><br><span class=\"line\">            bar: &#123;&#125;, <span class=\"comment\">// 按字母顺序</span></span><br><span class=\"line\">            foo: &#123;&#125;,</span><br><span class=\"line\">            fooBar: &#123;&#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    computed: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">//使用其它组件</span></span><br><span class=\"line\">    components: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 方法</span></span><br><span class=\"line\">    watch: &#123;&#125;,</span><br><span class=\"line\">    methods: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"comment\">// 生命周期函数</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2组件\"><a href=\"#4-2组件\" class=\"headerlink\" title=\"4.2组件\"></a>4.2组件</h4><p>组件以驼峰命名  以及书写顺序</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">my-components</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-components</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">import</span> myComponents <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponents.vue&#x27;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">      myComponents</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-组件引用\"><a href=\"#4-3-组件引用\" class=\"headerlink\" title=\"4.3 组件引用\"></a>4.3 组件引用</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponentsA <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsA.vue&#x27;</span>  </span><br><span class=\"line\"><span class=\"keyword\">import</span> myComponentsB <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsB.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myComponentsC <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsC.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> myComponentsD <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myComponentsD.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    myComponentsA,</span><br><span class=\"line\">    myComponentsB,</span><br><span class=\"line\">    myComponentsC,</span><br><span class=\"line\">    myComponentsD,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-事件\"><a href=\"#4-4-事件\" class=\"headerlink\" title=\"4.4 事件\"></a>4.4 事件</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- 不建议 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">v-on:click</span>=<span class=\"string\">&quot;pass()&quot;</span>&gt;</span>pass<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 推荐 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;pass&quot;</span>&gt;</span>pass<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"4-5-vue页面使用每个-vue-页面中的最外层template下面只能有一个标签\"><a href=\"#4-5-vue页面使用每个-vue-页面中的最外层template下面只能有一个标签\" class=\"headerlink\" title=\"4.5 vue页面使用每个 vue 页面中的最外层template下面只能有一个标签\"></a>4.5 vue页面使用每个 vue 页面中的最外层template下面只能有一个标签</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// error</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">// right</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-6-vue返回上一页\"><a href=\"#4-6-vue返回上一页\" class=\"headerlink\" title=\"4.6 vue返回上一页\"></a>4.6 vue返回上一页</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.go(-1) //就可以回到上一页。</span><br><span class=\"line\">history.go(-1) //是回到浏览器上一页，但是由于Vue应用是单页应用，浏览器的访问历史未必和Vue的浏览历史相同。</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-7-通过路由跳转，传递查询内容\"><a href=\"#4-7-通过路由跳转，传递查询内容\" class=\"headerlink\" title=\"4.7 通过路由跳转，传递查询内容\"></a>4.7 通过路由跳转，传递查询内容</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$router.push(&#123;</span><br><span class=\"line\">    path: <span class=\"string\">&quot;/path&quot;</span>,</span><br><span class=\"line\">    query:&#123;<span class=\"attr\">query</span>:queryThings&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-8-methods-自定义方法命名\"><a href=\"#4-8-methods-自定义方法命名\" class=\"headerlink\" title=\"4.8 methods 自定义方法命名\"></a>4.8 methods 自定义方法命名</h4><ol>\n<li>动宾短语（good：jumpPage、openCarInfoDialog）（bad：go、nextPage、show、open、login）</li>\n<li>ajax 方法以 get、post 开头，以 data 结尾（good：getListData、postFormData）（bad：takeData、confirmData、getList、postForm）</li>\n<li>事件方法以 on 开头（onTypeChange、onUsernameInput）</li>\n<li>init、refresh 单词除外</li>\n<li>尽量使用常用单词开头（set、get、open、close、jump）</li>\n<li>驼峰命名（good: getListData）（bad: get_list_data、getlistData）</li>\n</ol>\n<h4 id=\"4-9-路由的命名\"><a href=\"#4-9-路由的命名\" class=\"headerlink\" title=\"4.9 路由的命名\"></a>4.9 路由的命名</h4><p>path和name使用相同的命名</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 示例：&#123;</span><br><span class=\"line\">    path: &#x27;/merchandise&#x27;, //路由路径</span><br><span class=\"line\">    icon: &#x27;key&#x27;, //icon图标</span><br><span class=\"line\">    name: &#x27;merchandise&#x27;, //路由名称</span><br><span class=\"line\">    title: &#x27;商品&#x27;, //路由标题</span><br><span class=\"line\">    access: 0, //权限代码</span><br><span class=\"line\">    component: main,</span><br><span class=\"line\">    children: [</span><br><span class=\"line\">        &#123; path: &#x27;merchandise-pubish&#x27;, title: &#x27;商品发布&#x27;, name: &#x27;merchandise-pubish&#x27;, component: () =&gt; import(&#x27;@/views/merchandise/pubish.vue&#x27;) &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"五、注释规范\"><a href=\"#五、注释规范\" class=\"headerlink\" title=\"五、注释规范\"></a>五、注释规范</h3><h4 id=\"5-1-页面注释规范\"><a href=\"#5-1-页面注释规范\" class=\"headerlink\" title=\"5.1 页面注释规范\"></a>5.1 页面注释规范</h4><p>  页面中使用注释划分结构块，注意与css中的注释达成统一格式。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   <span class=\"comment\">&lt;!-- 头部 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;g-hd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- LOGO --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;m-logo&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hred</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>LOGO<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /LOGO --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 导航 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;m-nav&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hred</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>NAV1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">hred</span>=<span class=\"string\">&quot;#&quot;</span>&gt;</span>NAV2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- /导航 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- /头部 --&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"5-2-函数注释\"><a href=\"#5-2-函数注释\" class=\"headerlink\" title=\"5.2 函数注释\"></a>5.2 函数注释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 简述</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* 功能详细描述</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param </span>&lt;String&gt; arg1 参数1</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@param </span>&lt;Number&gt; arg2 参数2，默认为0</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return </span>&lt;Boolean&gt; 判断xxx是否成功</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fooFunction</span> (<span class=\"params\">arg1, arg2</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// code</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-3语句注释\"><a href=\"#5-3语句注释\" class=\"headerlink\" title=\"5.3语句注释\"></a>5.3语句注释</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   #单独一行 //(双斜线)与注释文字之间保留一个空格；</span><br><span class=\"line\">   #在代码后面添加注释：//(双斜线)与代码之间保留一个空格，并且//(双斜线)与注释文字之间保留一个空格；</span><br><span class=\"line\">   #//(双斜线)与代码之间保留一个空格。</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 调用了一个函数；1)单独在一行</span></span><br><span class=\"line\">setTitle();</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxCount = <span class=\"number\">10</span>; <span class=\"comment\">// 设置最大量；2)在代码后面注释</span></span><br><span class=\"line\"><span class=\"comment\">// setName(); // 3)注释代码</span></span><br></pre></td></tr></table></figure>\n"},{"title":"立即执行的js函数有毛用？","author":"Zhenggl","date":"2021-03-15T01:37:18.000Z","cover_picture":"https://img.91temaichang.com/blog/js-data-type.jpg","_content":"\n**js立即执行的函数可以让函数在创建之后立马执行，这种编写模式本质上就是函数表达式(命名的或者匿名的)，在创建之后立即执行**\n\n### 一、立即执行函数的写法\n\n![立即执行函数写法](https://img.91temaichang.com/blog/immedialtely-js.png)\n\n一般立即执行的函数，都是正常写一js函数(命名或者匿名的)，然后用一()将整个函数包括函数给括起来，然后再加一()紧跟随其后，有需要的就对应传递相关函数调用参数\n\n```javascript\n  // 匿名函数第一种写法：匿名函数包裹在一个括号运算符中，后面跟一个小括号\n  (function(){console.info('hello')})();      //输出hello\n  // 匿名函数第二种写法：匿名函数后面跟一个小括号，整个包裹在一个括号运算符中\n  (function(){console.info('hello')});\n  (function add(x, y){return x + y;})(1, 2);  //输出3\n  // 错误的写法\n  // function(){}();\n```\n上述第三种写法报错：Uncaught SyntaxError: Unexpected token{\njs词法引擎在解析function关键词之后，认为后面跟随的是函数定义语句，而在一条语句后面加上()会被当作分组操作符，\n分组操作符必须要有表达式，所以这里报错，不应该以圆括号结尾，以圆括号结尾，引擎就会认为后面跟的是一个表达式，而不是函数定义。\n\n**`(), !, +, -, ~, new 等运算符都能够起到立即执行的作用，这些运算符的作用就是将匿名/具名函数声明转换为函数表达式`**\n\n**`要注意两点，一是函数体后要有小括号()，二是函数体必须是函数表达式而不是函数声明`**\n```javascript\n  (function(test){console.info(test)})(123);  //使用()运算符，输出123\n  \n  (function(test){console.info(test)}(123));  //使用()运算符，输出123\n  \n  !function(test){console.info(test)}(123);  //使用!运算符，输出123\n  \n  var fn = function(test){console.info(test)}(123); //使用=运算法，输出123\n```\n\n### 二、立即执行函数的作用\n立即执行的函数只有一个作用：创建一个独立的作用域，这个作用域里面的变量，外面访问不了(即避免了变量的污染)。\n比如，有一面试题：\n```javascript\n  var liList = ul.getElementsByTagName('li');\n  for(var i = 0; i < 6; i ++){\n  \tliList.onclick = function(){\n  \t\talert(i);\n  \t}\n  }\n```\n输出：6,6,6,6,6,6\n原因：为毛上述的输出总是6呢？im因为输出的i是全局作用域的，当循环结束后i的值是6，所以i输出的就是6\n幅图：\n\n![幅图](https://img.91temaichang.com/blog/immediately-js-result.png)\n\n解决方案：\n\n用立即执行函数给每个li创造一个独立作用域即可\n```javascript\n  var liList = ul.getElementsByTagName('li');\n  for(var i = 0; i < 6; i ++){\n  \tliList.onclick = function(){\n  \t\talert(i);\n  \t}(i);\n  }\n```\n### 三、与闭包的区别\nsetTimeout依次输出0 1 2 3 4 5\n```javascript\n  for(var i = 0; i < 6; i ++){\n\t(function(i){\n\t\tsetTimeout(function(){\n\t\t\tconsole.info(i);\n\t\t}, 1000);\n\t})(i);\n  }\n  console.info(i);  //输出5，因为for循环后i就会变成5\n```\n解析：第一个5很好输出，因为已经过了一个for循环，因此值变为5，剩下的交给立即执行函数来执行，首先js中调用函数传参都是值传参，\n所以当立即执行函数执行时，首先会将i给copy一份，然后再创建函数作用域来执行函数，循环5次，就会对应创建5个作用域，所以1秒后几乎会同时输出0 1 2 3 4 5，\n这里同时输出，并没有1秒输出，这里需要了解下js的event loop机制\n\n**立即执行函数与闭包没有什么关系，只是两者会经常结合在一起使用而已，但两者有本质的不同**\n立即执行函数和闭包只是有一个共同优点就是能减少全局变量的使用。\n\n立即执行函数只是函数的一种调用方式，只是声明完之后立即执行，这类函数一般都只是调用一次，调用完之后会立即销毁，不会占用内存。\n\n闭包则主要是让外部函数可以访问内部函数的作用域，也减少了全局变量的使用，保证了内部变量的安全，但因被引用的内部变量不能被销毁，增大了内存消耗，使用不当易造成内存泄露。\n\n### 四、使用场景\n1. 你的代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等；\n2. 所有这些工作只需要执行一次，比如只需要显示一个时间；\n3. 但是这些代码也需要一些临时的变量，然后在初始化结束之后，就再也不会被用到，如果将这些变量作为全局变量，可能会被全局污染到。\n","source":"_posts/exec-immediately-func.md","raw":"---\ntitle: 立即执行的js函数有毛用？\nauthor: Zhenggl\ndate: 2021-03-15 09:37:18\ncategories:\n  - [前端, javascript]\ntags:\n  - javascript\n  - 基础\n  - function\ncover_picture: https://img.91temaichang.com/blog/js-data-type.jpg\n---\n\n**js立即执行的函数可以让函数在创建之后立马执行，这种编写模式本质上就是函数表达式(命名的或者匿名的)，在创建之后立即执行**\n\n### 一、立即执行函数的写法\n\n![立即执行函数写法](https://img.91temaichang.com/blog/immedialtely-js.png)\n\n一般立即执行的函数，都是正常写一js函数(命名或者匿名的)，然后用一()将整个函数包括函数给括起来，然后再加一()紧跟随其后，有需要的就对应传递相关函数调用参数\n\n```javascript\n  // 匿名函数第一种写法：匿名函数包裹在一个括号运算符中，后面跟一个小括号\n  (function(){console.info('hello')})();      //输出hello\n  // 匿名函数第二种写法：匿名函数后面跟一个小括号，整个包裹在一个括号运算符中\n  (function(){console.info('hello')});\n  (function add(x, y){return x + y;})(1, 2);  //输出3\n  // 错误的写法\n  // function(){}();\n```\n上述第三种写法报错：Uncaught SyntaxError: Unexpected token{\njs词法引擎在解析function关键词之后，认为后面跟随的是函数定义语句，而在一条语句后面加上()会被当作分组操作符，\n分组操作符必须要有表达式，所以这里报错，不应该以圆括号结尾，以圆括号结尾，引擎就会认为后面跟的是一个表达式，而不是函数定义。\n\n**`(), !, +, -, ~, new 等运算符都能够起到立即执行的作用，这些运算符的作用就是将匿名/具名函数声明转换为函数表达式`**\n\n**`要注意两点，一是函数体后要有小括号()，二是函数体必须是函数表达式而不是函数声明`**\n```javascript\n  (function(test){console.info(test)})(123);  //使用()运算符，输出123\n  \n  (function(test){console.info(test)}(123));  //使用()运算符，输出123\n  \n  !function(test){console.info(test)}(123);  //使用!运算符，输出123\n  \n  var fn = function(test){console.info(test)}(123); //使用=运算法，输出123\n```\n\n### 二、立即执行函数的作用\n立即执行的函数只有一个作用：创建一个独立的作用域，这个作用域里面的变量，外面访问不了(即避免了变量的污染)。\n比如，有一面试题：\n```javascript\n  var liList = ul.getElementsByTagName('li');\n  for(var i = 0; i < 6; i ++){\n  \tliList.onclick = function(){\n  \t\talert(i);\n  \t}\n  }\n```\n输出：6,6,6,6,6,6\n原因：为毛上述的输出总是6呢？im因为输出的i是全局作用域的，当循环结束后i的值是6，所以i输出的就是6\n幅图：\n\n![幅图](https://img.91temaichang.com/blog/immediately-js-result.png)\n\n解决方案：\n\n用立即执行函数给每个li创造一个独立作用域即可\n```javascript\n  var liList = ul.getElementsByTagName('li');\n  for(var i = 0; i < 6; i ++){\n  \tliList.onclick = function(){\n  \t\talert(i);\n  \t}(i);\n  }\n```\n### 三、与闭包的区别\nsetTimeout依次输出0 1 2 3 4 5\n```javascript\n  for(var i = 0; i < 6; i ++){\n\t(function(i){\n\t\tsetTimeout(function(){\n\t\t\tconsole.info(i);\n\t\t}, 1000);\n\t})(i);\n  }\n  console.info(i);  //输出5，因为for循环后i就会变成5\n```\n解析：第一个5很好输出，因为已经过了一个for循环，因此值变为5，剩下的交给立即执行函数来执行，首先js中调用函数传参都是值传参，\n所以当立即执行函数执行时，首先会将i给copy一份，然后再创建函数作用域来执行函数，循环5次，就会对应创建5个作用域，所以1秒后几乎会同时输出0 1 2 3 4 5，\n这里同时输出，并没有1秒输出，这里需要了解下js的event loop机制\n\n**立即执行函数与闭包没有什么关系，只是两者会经常结合在一起使用而已，但两者有本质的不同**\n立即执行函数和闭包只是有一个共同优点就是能减少全局变量的使用。\n\n立即执行函数只是函数的一种调用方式，只是声明完之后立即执行，这类函数一般都只是调用一次，调用完之后会立即销毁，不会占用内存。\n\n闭包则主要是让外部函数可以访问内部函数的作用域，也减少了全局变量的使用，保证了内部变量的安全，但因被引用的内部变量不能被销毁，增大了内存消耗，使用不当易造成内存泄露。\n\n### 四、使用场景\n1. 你的代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等；\n2. 所有这些工作只需要执行一次，比如只需要显示一个时间；\n3. 但是这些代码也需要一些临时的变量，然后在初始化结束之后，就再也不会被用到，如果将这些变量作为全局变量，可能会被全局污染到。\n","slug":"exec-immediately-func","published":1,"updated":"2021-03-15T03:08:31.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98ueq0004in0977q852l6","content":"<p><strong>js立即执行的函数可以让函数在创建之后立马执行，这种编写模式本质上就是函数表达式(命名的或者匿名的)，在创建之后立即执行</strong></p>\n<h3 id=\"一、立即执行函数的写法\"><a href=\"#一、立即执行函数的写法\" class=\"headerlink\" title=\"一、立即执行函数的写法\"></a>一、立即执行函数的写法</h3><p><img src=\"https://img.91temaichang.com/blog/immedialtely-js.png\" alt=\"立即执行函数写法\"></p>\n<p>一般立即执行的函数，都是正常写一js函数(命名或者匿名的)，然后用一()将整个函数包括函数给括起来，然后再加一()紧跟随其后，有需要的就对应传递相关函数调用参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名函数第一种写法：匿名函数包裹在一个括号运算符中，后面跟一个小括号</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.info(<span class=\"string\">&#x27;hello&#x27;</span>)&#125;)();      <span class=\"comment\">//输出hello</span></span><br><span class=\"line\"><span class=\"comment\">// 匿名函数第二种写法：匿名函数后面跟一个小括号，整个包裹在一个括号运算符中</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.info(<span class=\"string\">&#x27;hello&#x27;</span>)&#125;);</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>)</span>&#123;<span class=\"keyword\">return</span> x + y;&#125;)(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">//输出3</span></span><br><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"comment\">// function()&#123;&#125;();</span></span><br></pre></td></tr></table></figure>\n<p>上述第三种写法报错：Uncaught SyntaxError: Unexpected token{<br>js词法引擎在解析function关键词之后，认为后面跟随的是函数定义语句，而在一条语句后面加上()会被当作分组操作符，<br>分组操作符必须要有表达式，所以这里报错，不应该以圆括号结尾，以圆括号结尾，引擎就会认为后面跟的是一个表达式，而不是函数定义。</p>\n<p><strong><code>(), !, +, -, ~, new 等运算符都能够起到立即执行的作用，这些运算符的作用就是将匿名/具名函数声明转换为函数表达式</code></strong></p>\n<p><strong><code>要注意两点，一是函数体后要有小括号()，二是函数体必须是函数表达式而不是函数声明</code></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;)(<span class=\"number\">123</span>);  <span class=\"comment\">//使用()运算符，输出123</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;(<span class=\"number\">123</span>));  <span class=\"comment\">//使用()运算符，输出123</span></span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;(<span class=\"number\">123</span>);  <span class=\"comment\">//使用!运算符，输出123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;(<span class=\"number\">123</span>); <span class=\"comment\">//使用=运算法，输出123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、立即执行函数的作用\"><a href=\"#二、立即执行函数的作用\" class=\"headerlink\" title=\"二、立即执行函数的作用\"></a>二、立即执行函数的作用</h3><p>立即执行的函数只有一个作用：创建一个独立的作用域，这个作用域里面的变量，外面访问不了(即避免了变量的污染)。<br>比如，有一面试题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> liList = ul.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i ++)&#123;</span><br><span class=\"line\">\tliList.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：6,6,6,6,6,6<br>原因：为毛上述的输出总是6呢？im因为输出的i是全局作用域的，当循环结束后i的值是6，所以i输出的就是6<br>幅图：</p>\n<p><img src=\"https://img.91temaichang.com/blog/immediately-js-result.png\" alt=\"幅图\"></p>\n<p>解决方案：</p>\n<p>用立即执行函数给每个li创造一个独立作用域即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> liList = ul.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i ++)&#123;</span><br><span class=\"line\">\tliList.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(i);</span><br><span class=\"line\">\t&#125;(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、与闭包的区别\"><a href=\"#三、与闭包的区别\" class=\"headerlink\" title=\"三、与闭包的区别\"></a>三、与闭包的区别</h3><p>setTimeout依次输出0 1 2 3 4 5</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i ++)&#123;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.info(i);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)(i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.info(i);  <span class=\"comment\">//输出5，因为for循环后i就会变成5</span></span><br></pre></td></tr></table></figure>\n<p>解析：第一个5很好输出，因为已经过了一个for循环，因此值变为5，剩下的交给立即执行函数来执行，首先js中调用函数传参都是值传参，<br>所以当立即执行函数执行时，首先会将i给copy一份，然后再创建函数作用域来执行函数，循环5次，就会对应创建5个作用域，所以1秒后几乎会同时输出0 1 2 3 4 5，<br>这里同时输出，并没有1秒输出，这里需要了解下js的event loop机制</p>\n<p><strong>立即执行函数与闭包没有什么关系，只是两者会经常结合在一起使用而已，但两者有本质的不同</strong><br>立即执行函数和闭包只是有一个共同优点就是能减少全局变量的使用。</p>\n<p>立即执行函数只是函数的一种调用方式，只是声明完之后立即执行，这类函数一般都只是调用一次，调用完之后会立即销毁，不会占用内存。</p>\n<p>闭包则主要是让外部函数可以访问内部函数的作用域，也减少了全局变量的使用，保证了内部变量的安全，但因被引用的内部变量不能被销毁，增大了内存消耗，使用不当易造成内存泄露。</p>\n<h3 id=\"四、使用场景\"><a href=\"#四、使用场景\" class=\"headerlink\" title=\"四、使用场景\"></a>四、使用场景</h3><ol>\n<li>你的代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等；</li>\n<li>所有这些工作只需要执行一次，比如只需要显示一个时间；</li>\n<li>但是这些代码也需要一些临时的变量，然后在初始化结束之后，就再也不会被用到，如果将这些变量作为全局变量，可能会被全局污染到。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>js立即执行的函数可以让函数在创建之后立马执行，这种编写模式本质上就是函数表达式(命名的或者匿名的)，在创建之后立即执行</strong></p>\n<h3 id=\"一、立即执行函数的写法\"><a href=\"#一、立即执行函数的写法\" class=\"headerlink\" title=\"一、立即执行函数的写法\"></a>一、立即执行函数的写法</h3><p><img src=\"https://img.91temaichang.com/blog/immedialtely-js.png\" alt=\"立即执行函数写法\"></p>\n<p>一般立即执行的函数，都是正常写一js函数(命名或者匿名的)，然后用一()将整个函数包括函数给括起来，然后再加一()紧跟随其后，有需要的就对应传递相关函数调用参数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 匿名函数第一种写法：匿名函数包裹在一个括号运算符中，后面跟一个小括号</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.info(<span class=\"string\">&#x27;hello&#x27;</span>)&#125;)();      <span class=\"comment\">//输出hello</span></span><br><span class=\"line\"><span class=\"comment\">// 匿名函数第二种写法：匿名函数后面跟一个小括号，整个包裹在一个括号运算符中</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.info(<span class=\"string\">&#x27;hello&#x27;</span>)&#125;);</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>)</span>&#123;<span class=\"keyword\">return</span> x + y;&#125;)(<span class=\"number\">1</span>, <span class=\"number\">2</span>);  <span class=\"comment\">//输出3</span></span><br><span class=\"line\"><span class=\"comment\">// 错误的写法</span></span><br><span class=\"line\"><span class=\"comment\">// function()&#123;&#125;();</span></span><br></pre></td></tr></table></figure>\n<p>上述第三种写法报错：Uncaught SyntaxError: Unexpected token{<br>js词法引擎在解析function关键词之后，认为后面跟随的是函数定义语句，而在一条语句后面加上()会被当作分组操作符，<br>分组操作符必须要有表达式，所以这里报错，不应该以圆括号结尾，以圆括号结尾，引擎就会认为后面跟的是一个表达式，而不是函数定义。</p>\n<p><strong><code>(), !, +, -, ~, new 等运算符都能够起到立即执行的作用，这些运算符的作用就是将匿名/具名函数声明转换为函数表达式</code></strong></p>\n<p><strong><code>要注意两点，一是函数体后要有小括号()，二是函数体必须是函数表达式而不是函数声明</code></strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;)(<span class=\"number\">123</span>);  <span class=\"comment\">//使用()运算符，输出123</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;(<span class=\"number\">123</span>));  <span class=\"comment\">//使用()运算符，输出123</span></span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;(<span class=\"number\">123</span>);  <span class=\"comment\">//使用!运算符，输出123</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> fn = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">test</span>)</span>&#123;<span class=\"built_in\">console</span>.info(test)&#125;(<span class=\"number\">123</span>); <span class=\"comment\">//使用=运算法，输出123</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、立即执行函数的作用\"><a href=\"#二、立即执行函数的作用\" class=\"headerlink\" title=\"二、立即执行函数的作用\"></a>二、立即执行函数的作用</h3><p>立即执行的函数只有一个作用：创建一个独立的作用域，这个作用域里面的变量，外面访问不了(即避免了变量的污染)。<br>比如，有一面试题：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> liList = ul.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i ++)&#123;</span><br><span class=\"line\">\tliList.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输出：6,6,6,6,6,6<br>原因：为毛上述的输出总是6呢？im因为输出的i是全局作用域的，当循环结束后i的值是6，所以i输出的就是6<br>幅图：</p>\n<p><img src=\"https://img.91temaichang.com/blog/immediately-js-result.png\" alt=\"幅图\"></p>\n<p>解决方案：</p>\n<p>用立即执行函数给每个li创造一个独立作用域即可</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> liList = ul.getElementsByTagName(<span class=\"string\">&#x27;li&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i ++)&#123;</span><br><span class=\"line\">\tliList.onclick = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\talert(i);</span><br><span class=\"line\">\t&#125;(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"三、与闭包的区别\"><a href=\"#三、与闭包的区别\" class=\"headerlink\" title=\"三、与闭包的区别\"></a>三、与闭包的区别</h3><p>setTimeout依次输出0 1 2 3 4 5</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i ++)&#123;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.info(i);</span><br><span class=\"line\">\t&#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;)(i);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"built_in\">console</span>.info(i);  <span class=\"comment\">//输出5，因为for循环后i就会变成5</span></span><br></pre></td></tr></table></figure>\n<p>解析：第一个5很好输出，因为已经过了一个for循环，因此值变为5，剩下的交给立即执行函数来执行，首先js中调用函数传参都是值传参，<br>所以当立即执行函数执行时，首先会将i给copy一份，然后再创建函数作用域来执行函数，循环5次，就会对应创建5个作用域，所以1秒后几乎会同时输出0 1 2 3 4 5，<br>这里同时输出，并没有1秒输出，这里需要了解下js的event loop机制</p>\n<p><strong>立即执行函数与闭包没有什么关系，只是两者会经常结合在一起使用而已，但两者有本质的不同</strong><br>立即执行函数和闭包只是有一个共同优点就是能减少全局变量的使用。</p>\n<p>立即执行函数只是函数的一种调用方式，只是声明完之后立即执行，这类函数一般都只是调用一次，调用完之后会立即销毁，不会占用内存。</p>\n<p>闭包则主要是让外部函数可以访问内部函数的作用域，也减少了全局变量的使用，保证了内部变量的安全，但因被引用的内部变量不能被销毁，增大了内存消耗，使用不当易造成内存泄露。</p>\n<h3 id=\"四、使用场景\"><a href=\"#四、使用场景\" class=\"headerlink\" title=\"四、使用场景\"></a>四、使用场景</h3><ol>\n<li>你的代码在页面加载完成之后，不得不执行一些设置工作，比如时间处理器，创建对象等等；</li>\n<li>所有这些工作只需要执行一次，比如只需要显示一个时间；</li>\n<li>但是这些代码也需要一些临时的变量，然后在初始化结束之后，就再也不会被用到，如果将这些变量作为全局变量，可能会被全局污染到。</li>\n</ol>\n"},{"title":"Hexo安装与配置服务升级","date":"2021-03-04T03:31:31.631Z","author":"Zhenggl","cover_picture":"http://img.91temaichang.com/blog/default-cover.jpg","top":1,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hexo安装与配置服务升级\ndate: 2021-03-06c\ncategories:\nauthor: Zhenggl\ntags:\n    - Hexo\n    - npm\n    - Node.js\ncover_picture: http://img.91temaichang.com/blog/default-cover.jpg\ntop: 1\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2021-03-07T17:41:08.036Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98ues0006in090xq67zty","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Hexo + github + netlify搭建自己的博客系统","author":"Zhenggl","date":"2021-03-07T08:27:48.000Z","cover_picture":"http://img.91temaichang.com/blog/hexo-github.jpg","top":1,"_content":"\n### 一、开始使用\n#### 1.1简介\n根据Hexo官方描述，Hexo是一个快速、简介且高效的博客框架，使用markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n#### 1.2安装\n##### 1.2.1环境需求\n\n - Node.js(版本不得低于10.13，建议使用Node.js12.0及以上)\n - Git\n\n以上两个就不在描述具体如何安装了，度娘一大把\n#### 1.3 Hexo安装\n```shell\nnpm install -g hexo\n```\n\n### 二、开始使用\n#### 2.1 创建博客项目，并初始化\n安装完成后，可直接通过hexo创建并初始化项目，通过以下命令\n```shell\nhexo init blog\n```\n通过上述命令，我们创建并初始化了项目名为blog的Hexo项目\n```shell\ncd blog && npm install \n```\n#### 2.2 目录结构分析说明\n进入blog项目，并安装相关的依赖，通过以下示意图我们可以简单的讲解下项目的目录结构，以及对应的文件作用：\n![目录结构](http://img.91temaichang.com/blog/directory-structure.png)\n1. .deploy_git: 通过github进行打包部署，所生成的待提交的静态资源文件；\n2. scaffold: 通过`new`命令创建出来的页面所需的模版，默认是拿的page作为模版；\n3. source: 通过`new`命令创建出来的页面资源的*.md文件目录，一般我们创建的页面，都在这个目录里面，按照`new`命令对应的标题来命名的；\n4. themes：引用的三方样式，可直接通过配置文件，引用第三方已开发完成并使用中的模版；\n5. _config.yml：整个blog项目的配置文件，从整体上对项目进行全局配置；\n\n#### 2.3 项目配置文件说明\n_config.yml为项目的全局配置文件，一般我们通过配置该文件，对项目整体上进行统一的配置，具体对应哪些字段就不再重复说明了，官方文档上已经解说得很清楚的了，详情请直接访问官方的 [链接](https://hexo.io/zh-cn/docs/configuration)\n##### 2.3.1 上线部署的配置\n```yaml\ndeploy:\n  type: git # 通过git方式来提交\n  repo: https://github.com/kbmjj123/hexo-blog.git # 关联github仓库\n  branch: main #代码分支\n```\n### 三、Hexo命令解读：\n官方对Hexo的相关命令均进行了详细的说明，具体可以浏览官方的[链接](https://hexo.io/zh-cn/docs/commands)进行熟悉；\n\n### 四、开始写作：\n#### 4.1 通过命令创建一新的页面\n```shell\nhexo new page 文件名称 // 如果文件名称由多个字符串构成，需要使用引号将文件名称包裹起来\n```\n#### 4.2 通过上述命令，我们可以在对应的`source/_posts`目录中，看到我们添加的文件目录以及对应的*.md文件\n#### 4.3 写作完成后，进行资源文件生成，并发布\n```shell\nhexo g && hexo d // g为generate、d为deploy的缩写\n```\n这里生成后的资源，均会在.deploy_get目录中生成对应的资源文件，并自动提交至github上，前提是已经在本地将github的key给维护进来了。\n\n### 五、托管到Netlify\n#### 5.1 注册Netlify\n打开[链接](https://www.netlify.com)进行netlify的注册，并选择代码托管的方式来注册\n![注册方式](http://img.91temaichang.com/blog/directory-structure.png)\n#### 5.2 创建新的Site，并选择github作为来源\n![创建site](http://img.91temaichang.com/blog/netlify-create.png)\n#### 5.3 然后选择我们刚刚在github上创建的项目\n![选择项目](http://img.91temaichang.com/blog/netlify-choose-project.png)\n#### 5.4 选择对应的项目分支\n![选择分支](http://img.91temaichang.com/blog/netlify-choose-branch.png)\n#### 5.5 接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\n![创建成功](http://img.91temaichang.com/blog/netlify-created-site.png)\n#### 5.6 添加项目域名\n![配置域名](http://img.91temaichang.com/blog/netlify-edit-domain.png)\n#### 5.7 配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\n![获取记录](http://img.91temaichang.com/blog/netlify-edit-domain2.png)\n对应登录阿里云控制台，找到域名，对应进入解析配置中心，并对应添加两条记录：\n![阿里云DNS解析](http://img.91temaichang.com/blog/aliyun.png)\n#### 5.8 解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\n![配置后的访问](http://img.91temaichang.com/blog/blog.png)\n\n","source":"_posts/hexo-github-netify.md","raw":"---\ntitle: Hexo + github + netlify搭建自己的博客系统\nauthor: Zhenggl\ndate: 2021-03-07 16:27:48\ncategories:\n  - [积累与沉淀,自定义服务]\ntags:\n  - hexo\n  - github\n  - netlify\ncover_picture: http://img.91temaichang.com/blog/hexo-github.jpg\ntop: 1\n---\n\n### 一、开始使用\n#### 1.1简介\n根据Hexo官方描述，Hexo是一个快速、简介且高效的博客框架，使用markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n#### 1.2安装\n##### 1.2.1环境需求\n\n - Node.js(版本不得低于10.13，建议使用Node.js12.0及以上)\n - Git\n\n以上两个就不在描述具体如何安装了，度娘一大把\n#### 1.3 Hexo安装\n```shell\nnpm install -g hexo\n```\n\n### 二、开始使用\n#### 2.1 创建博客项目，并初始化\n安装完成后，可直接通过hexo创建并初始化项目，通过以下命令\n```shell\nhexo init blog\n```\n通过上述命令，我们创建并初始化了项目名为blog的Hexo项目\n```shell\ncd blog && npm install \n```\n#### 2.2 目录结构分析说明\n进入blog项目，并安装相关的依赖，通过以下示意图我们可以简单的讲解下项目的目录结构，以及对应的文件作用：\n![目录结构](http://img.91temaichang.com/blog/directory-structure.png)\n1. .deploy_git: 通过github进行打包部署，所生成的待提交的静态资源文件；\n2. scaffold: 通过`new`命令创建出来的页面所需的模版，默认是拿的page作为模版；\n3. source: 通过`new`命令创建出来的页面资源的*.md文件目录，一般我们创建的页面，都在这个目录里面，按照`new`命令对应的标题来命名的；\n4. themes：引用的三方样式，可直接通过配置文件，引用第三方已开发完成并使用中的模版；\n5. _config.yml：整个blog项目的配置文件，从整体上对项目进行全局配置；\n\n#### 2.3 项目配置文件说明\n_config.yml为项目的全局配置文件，一般我们通过配置该文件，对项目整体上进行统一的配置，具体对应哪些字段就不再重复说明了，官方文档上已经解说得很清楚的了，详情请直接访问官方的 [链接](https://hexo.io/zh-cn/docs/configuration)\n##### 2.3.1 上线部署的配置\n```yaml\ndeploy:\n  type: git # 通过git方式来提交\n  repo: https://github.com/kbmjj123/hexo-blog.git # 关联github仓库\n  branch: main #代码分支\n```\n### 三、Hexo命令解读：\n官方对Hexo的相关命令均进行了详细的说明，具体可以浏览官方的[链接](https://hexo.io/zh-cn/docs/commands)进行熟悉；\n\n### 四、开始写作：\n#### 4.1 通过命令创建一新的页面\n```shell\nhexo new page 文件名称 // 如果文件名称由多个字符串构成，需要使用引号将文件名称包裹起来\n```\n#### 4.2 通过上述命令，我们可以在对应的`source/_posts`目录中，看到我们添加的文件目录以及对应的*.md文件\n#### 4.3 写作完成后，进行资源文件生成，并发布\n```shell\nhexo g && hexo d // g为generate、d为deploy的缩写\n```\n这里生成后的资源，均会在.deploy_get目录中生成对应的资源文件，并自动提交至github上，前提是已经在本地将github的key给维护进来了。\n\n### 五、托管到Netlify\n#### 5.1 注册Netlify\n打开[链接](https://www.netlify.com)进行netlify的注册，并选择代码托管的方式来注册\n![注册方式](http://img.91temaichang.com/blog/directory-structure.png)\n#### 5.2 创建新的Site，并选择github作为来源\n![创建site](http://img.91temaichang.com/blog/netlify-create.png)\n#### 5.3 然后选择我们刚刚在github上创建的项目\n![选择项目](http://img.91temaichang.com/blog/netlify-choose-project.png)\n#### 5.4 选择对应的项目分支\n![选择分支](http://img.91temaichang.com/blog/netlify-choose-branch.png)\n#### 5.5 接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\n![创建成功](http://img.91temaichang.com/blog/netlify-created-site.png)\n#### 5.6 添加项目域名\n![配置域名](http://img.91temaichang.com/blog/netlify-edit-domain.png)\n#### 5.7 配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\n![获取记录](http://img.91temaichang.com/blog/netlify-edit-domain2.png)\n对应登录阿里云控制台，找到域名，对应进入解析配置中心，并对应添加两条记录：\n![阿里云DNS解析](http://img.91temaichang.com/blog/aliyun.png)\n#### 5.8 解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\n![配置后的访问](http://img.91temaichang.com/blog/blog.png)\n\n","slug":"hexo-github-netify","published":1,"updated":"2021-03-07T17:38:17.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98uet0007in09fipf4qhp","content":"<h3 id=\"一、开始使用\"><a href=\"#一、开始使用\" class=\"headerlink\" title=\"一、开始使用\"></a>一、开始使用</h3><h4 id=\"1-1简介\"><a href=\"#1-1简介\" class=\"headerlink\" title=\"1.1简介\"></a>1.1简介</h4><p>根据Hexo官方描述，Hexo是一个快速、简介且高效的博客框架，使用markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h4 id=\"1-2安装\"><a href=\"#1-2安装\" class=\"headerlink\" title=\"1.2安装\"></a>1.2安装</h4><h5 id=\"1-2-1环境需求\"><a href=\"#1-2-1环境需求\" class=\"headerlink\" title=\"1.2.1环境需求\"></a>1.2.1环境需求</h5><ul>\n<li>Node.js(版本不得低于10.13，建议使用Node.js12.0及以上)</li>\n<li>Git</li>\n</ul>\n<p>以上两个就不在描述具体如何安装了，度娘一大把</p>\n<h4 id=\"1-3-Hexo安装\"><a href=\"#1-3-Hexo安装\" class=\"headerlink\" title=\"1.3 Hexo安装\"></a>1.3 Hexo安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、开始使用\"><a href=\"#二、开始使用\" class=\"headerlink\" title=\"二、开始使用\"></a>二、开始使用</h3><h4 id=\"2-1-创建博客项目，并初始化\"><a href=\"#2-1-创建博客项目，并初始化\" class=\"headerlink\" title=\"2.1 创建博客项目，并初始化\"></a>2.1 创建博客项目，并初始化</h4><p>安装完成后，可直接通过hexo创建并初始化项目，通过以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<p>通过上述命令，我们创建并初始化了项目名为blog的Hexo项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog &amp;&amp; npm install </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-目录结构分析说明\"><a href=\"#2-2-目录结构分析说明\" class=\"headerlink\" title=\"2.2 目录结构分析说明\"></a>2.2 目录结构分析说明</h4><p>进入blog项目，并安装相关的依赖，通过以下示意图我们可以简单的讲解下项目的目录结构，以及对应的文件作用：<br><img src=\"http://img.91temaichang.com/blog/directory-structure.png\" alt=\"目录结构\"></p>\n<ol>\n<li>.deploy_git: 通过github进行打包部署，所生成的待提交的静态资源文件；</li>\n<li>scaffold: 通过<code>new</code>命令创建出来的页面所需的模版，默认是拿的page作为模版；</li>\n<li>source: 通过<code>new</code>命令创建出来的页面资源的*.md文件目录，一般我们创建的页面，都在这个目录里面，按照<code>new</code>命令对应的标题来命名的；</li>\n<li>themes：引用的三方样式，可直接通过配置文件，引用第三方已开发完成并使用中的模版；</li>\n<li>_config.yml：整个blog项目的配置文件，从整体上对项目进行全局配置；</li>\n</ol>\n<h4 id=\"2-3-项目配置文件说明\"><a href=\"#2-3-项目配置文件说明\" class=\"headerlink\" title=\"2.3 项目配置文件说明\"></a>2.3 项目配置文件说明</h4><p>_config.yml为项目的全局配置文件，一般我们通过配置该文件，对项目整体上进行统一的配置，具体对应哪些字段就不再重复说明了，官方文档上已经解说得很清楚的了，详情请直接访问官方的 <a href=\"https://hexo.io/zh-cn/docs/configuration\">链接</a></p>\n<h5 id=\"2-3-1-上线部署的配置\"><a href=\"#2-3-1-上线部署的配置\" class=\"headerlink\" title=\"2.3.1 上线部署的配置\"></a>2.3.1 上线部署的配置</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\"># 通过git方式来提交</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/kbmjj123/hexo-blog.git</span> <span class=\"comment\"># 关联github仓库</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span> <span class=\"comment\">#代码分支</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、Hexo命令解读：\"><a href=\"#三、Hexo命令解读：\" class=\"headerlink\" title=\"三、Hexo命令解读：\"></a>三、Hexo命令解读：</h3><p>官方对Hexo的相关命令均进行了详细的说明，具体可以浏览官方的<a href=\"https://hexo.io/zh-cn/docs/commands\">链接</a>进行熟悉；</p>\n<h3 id=\"四、开始写作：\"><a href=\"#四、开始写作：\" class=\"headerlink\" title=\"四、开始写作：\"></a>四、开始写作：</h3><h4 id=\"4-1-通过命令创建一新的页面\"><a href=\"#4-1-通过命令创建一新的页面\" class=\"headerlink\" title=\"4.1 通过命令创建一新的页面\"></a>4.1 通过命令创建一新的页面</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page 文件名称 // 如果文件名称由多个字符串构成，需要使用引号将文件名称包裹起来</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-通过上述命令，我们可以在对应的source-posts目录中，看到我们添加的文件目录以及对应的-md文件\"><a href=\"#4-2-通过上述命令，我们可以在对应的source-posts目录中，看到我们添加的文件目录以及对应的-md文件\" class=\"headerlink\" title=\"4.2 通过上述命令，我们可以在对应的source/_posts目录中，看到我们添加的文件目录以及对应的*.md文件\"></a>4.2 通过上述命令，我们可以在对应的<code>source/_posts</code>目录中，看到我们添加的文件目录以及对应的*.md文件</h4><h4 id=\"4-3-写作完成后，进行资源文件生成，并发布\"><a href=\"#4-3-写作完成后，进行资源文件生成，并发布\" class=\"headerlink\" title=\"4.3 写作完成后，进行资源文件生成，并发布\"></a>4.3 写作完成后，进行资源文件生成，并发布</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g &amp;&amp; hexo d // g为generate、d为deploy的缩写</span><br></pre></td></tr></table></figure>\n<p>这里生成后的资源，均会在.deploy_get目录中生成对应的资源文件，并自动提交至github上，前提是已经在本地将github的key给维护进来了。</p>\n<h3 id=\"五、托管到Netlify\"><a href=\"#五、托管到Netlify\" class=\"headerlink\" title=\"五、托管到Netlify\"></a>五、托管到Netlify</h3><h4 id=\"5-1-注册Netlify\"><a href=\"#5-1-注册Netlify\" class=\"headerlink\" title=\"5.1 注册Netlify\"></a>5.1 注册Netlify</h4><p>打开<a href=\"https://www.netlify.com/\">链接</a>进行netlify的注册，并选择代码托管的方式来注册<br><img src=\"http://img.91temaichang.com/blog/directory-structure.png\" alt=\"注册方式\"></p>\n<h4 id=\"5-2-创建新的Site，并选择github作为来源\"><a href=\"#5-2-创建新的Site，并选择github作为来源\" class=\"headerlink\" title=\"5.2 创建新的Site，并选择github作为来源\"></a>5.2 创建新的Site，并选择github作为来源</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-create.png\" alt=\"创建site\"></p>\n<h4 id=\"5-3-然后选择我们刚刚在github上创建的项目\"><a href=\"#5-3-然后选择我们刚刚在github上创建的项目\" class=\"headerlink\" title=\"5.3 然后选择我们刚刚在github上创建的项目\"></a>5.3 然后选择我们刚刚在github上创建的项目</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-choose-project.png\" alt=\"选择项目\"></p>\n<h4 id=\"5-4-选择对应的项目分支\"><a href=\"#5-4-选择对应的项目分支\" class=\"headerlink\" title=\"5.4 选择对应的项目分支\"></a>5.4 选择对应的项目分支</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-choose-branch.png\" alt=\"选择分支\"></p>\n<h4 id=\"5-5-接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\"><a href=\"#5-5-接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\" class=\"headerlink\" title=\"5.5 接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\"></a>5.5 接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-created-site.png\" alt=\"创建成功\"></p>\n<h4 id=\"5-6-添加项目域名\"><a href=\"#5-6-添加项目域名\" class=\"headerlink\" title=\"5.6 添加项目域名\"></a>5.6 添加项目域名</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-edit-domain.png\" alt=\"配置域名\"></p>\n<h4 id=\"5-7-配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\"><a href=\"#5-7-配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\" class=\"headerlink\" title=\"5.7 配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\"></a>5.7 配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-edit-domain2.png\" alt=\"获取记录\"><br>对应登录阿里云控制台，找到域名，对应进入解析配置中心，并对应添加两条记录：<br><img src=\"http://img.91temaichang.com/blog/aliyun.png\" alt=\"阿里云DNS解析\"></p>\n<h4 id=\"5-8-解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\"><a href=\"#5-8-解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\" class=\"headerlink\" title=\"5.8 解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\"></a>5.8 解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了</h4><p><img src=\"http://img.91temaichang.com/blog/blog.png\" alt=\"配置后的访问\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、开始使用\"><a href=\"#一、开始使用\" class=\"headerlink\" title=\"一、开始使用\"></a>一、开始使用</h3><h4 id=\"1-1简介\"><a href=\"#1-1简介\" class=\"headerlink\" title=\"1.1简介\"></a>1.1简介</h4><p>根据Hexo官方描述，Hexo是一个快速、简介且高效的博客框架，使用markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>\n<h4 id=\"1-2安装\"><a href=\"#1-2安装\" class=\"headerlink\" title=\"1.2安装\"></a>1.2安装</h4><h5 id=\"1-2-1环境需求\"><a href=\"#1-2-1环境需求\" class=\"headerlink\" title=\"1.2.1环境需求\"></a>1.2.1环境需求</h5><ul>\n<li>Node.js(版本不得低于10.13，建议使用Node.js12.0及以上)</li>\n<li>Git</li>\n</ul>\n<p>以上两个就不在描述具体如何安装了，度娘一大把</p>\n<h4 id=\"1-3-Hexo安装\"><a href=\"#1-3-Hexo安装\" class=\"headerlink\" title=\"1.3 Hexo安装\"></a>1.3 Hexo安装</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"二、开始使用\"><a href=\"#二、开始使用\" class=\"headerlink\" title=\"二、开始使用\"></a>二、开始使用</h3><h4 id=\"2-1-创建博客项目，并初始化\"><a href=\"#2-1-创建博客项目，并初始化\" class=\"headerlink\" title=\"2.1 创建博客项目，并初始化\"></a>2.1 创建博客项目，并初始化</h4><p>安装完成后，可直接通过hexo创建并初始化项目，通过以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init blog</span><br></pre></td></tr></table></figure>\n<p>通过上述命令，我们创建并初始化了项目名为blog的Hexo项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd blog &amp;&amp; npm install </span><br></pre></td></tr></table></figure>\n<h4 id=\"2-2-目录结构分析说明\"><a href=\"#2-2-目录结构分析说明\" class=\"headerlink\" title=\"2.2 目录结构分析说明\"></a>2.2 目录结构分析说明</h4><p>进入blog项目，并安装相关的依赖，通过以下示意图我们可以简单的讲解下项目的目录结构，以及对应的文件作用：<br><img src=\"http://img.91temaichang.com/blog/directory-structure.png\" alt=\"目录结构\"></p>\n<ol>\n<li>.deploy_git: 通过github进行打包部署，所生成的待提交的静态资源文件；</li>\n<li>scaffold: 通过<code>new</code>命令创建出来的页面所需的模版，默认是拿的page作为模版；</li>\n<li>source: 通过<code>new</code>命令创建出来的页面资源的*.md文件目录，一般我们创建的页面，都在这个目录里面，按照<code>new</code>命令对应的标题来命名的；</li>\n<li>themes：引用的三方样式，可直接通过配置文件，引用第三方已开发完成并使用中的模版；</li>\n<li>_config.yml：整个blog项目的配置文件，从整体上对项目进行全局配置；</li>\n</ol>\n<h4 id=\"2-3-项目配置文件说明\"><a href=\"#2-3-项目配置文件说明\" class=\"headerlink\" title=\"2.3 项目配置文件说明\"></a>2.3 项目配置文件说明</h4><p>_config.yml为项目的全局配置文件，一般我们通过配置该文件，对项目整体上进行统一的配置，具体对应哪些字段就不再重复说明了，官方文档上已经解说得很清楚的了，详情请直接访问官方的 <a href=\"https://hexo.io/zh-cn/docs/configuration\">链接</a></p>\n<h5 id=\"2-3-1-上线部署的配置\"><a href=\"#2-3-1-上线部署的配置\" class=\"headerlink\" title=\"2.3.1 上线部署的配置\"></a>2.3.1 上线部署的配置</h5><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span> <span class=\"comment\"># 通过git方式来提交</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">https://github.com/kbmjj123/hexo-blog.git</span> <span class=\"comment\"># 关联github仓库</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">main</span> <span class=\"comment\">#代码分支</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"三、Hexo命令解读：\"><a href=\"#三、Hexo命令解读：\" class=\"headerlink\" title=\"三、Hexo命令解读：\"></a>三、Hexo命令解读：</h3><p>官方对Hexo的相关命令均进行了详细的说明，具体可以浏览官方的<a href=\"https://hexo.io/zh-cn/docs/commands\">链接</a>进行熟悉；</p>\n<h3 id=\"四、开始写作：\"><a href=\"#四、开始写作：\" class=\"headerlink\" title=\"四、开始写作：\"></a>四、开始写作：</h3><h4 id=\"4-1-通过命令创建一新的页面\"><a href=\"#4-1-通过命令创建一新的页面\" class=\"headerlink\" title=\"4.1 通过命令创建一新的页面\"></a>4.1 通过命令创建一新的页面</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page 文件名称 // 如果文件名称由多个字符串构成，需要使用引号将文件名称包裹起来</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-通过上述命令，我们可以在对应的source-posts目录中，看到我们添加的文件目录以及对应的-md文件\"><a href=\"#4-2-通过上述命令，我们可以在对应的source-posts目录中，看到我们添加的文件目录以及对应的-md文件\" class=\"headerlink\" title=\"4.2 通过上述命令，我们可以在对应的source/_posts目录中，看到我们添加的文件目录以及对应的*.md文件\"></a>4.2 通过上述命令，我们可以在对应的<code>source/_posts</code>目录中，看到我们添加的文件目录以及对应的*.md文件</h4><h4 id=\"4-3-写作完成后，进行资源文件生成，并发布\"><a href=\"#4-3-写作完成后，进行资源文件生成，并发布\" class=\"headerlink\" title=\"4.3 写作完成后，进行资源文件生成，并发布\"></a>4.3 写作完成后，进行资源文件生成，并发布</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g &amp;&amp; hexo d // g为generate、d为deploy的缩写</span><br></pre></td></tr></table></figure>\n<p>这里生成后的资源，均会在.deploy_get目录中生成对应的资源文件，并自动提交至github上，前提是已经在本地将github的key给维护进来了。</p>\n<h3 id=\"五、托管到Netlify\"><a href=\"#五、托管到Netlify\" class=\"headerlink\" title=\"五、托管到Netlify\"></a>五、托管到Netlify</h3><h4 id=\"5-1-注册Netlify\"><a href=\"#5-1-注册Netlify\" class=\"headerlink\" title=\"5.1 注册Netlify\"></a>5.1 注册Netlify</h4><p>打开<a href=\"https://www.netlify.com/\">链接</a>进行netlify的注册，并选择代码托管的方式来注册<br><img src=\"http://img.91temaichang.com/blog/directory-structure.png\" alt=\"注册方式\"></p>\n<h4 id=\"5-2-创建新的Site，并选择github作为来源\"><a href=\"#5-2-创建新的Site，并选择github作为来源\" class=\"headerlink\" title=\"5.2 创建新的Site，并选择github作为来源\"></a>5.2 创建新的Site，并选择github作为来源</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-create.png\" alt=\"创建site\"></p>\n<h4 id=\"5-3-然后选择我们刚刚在github上创建的项目\"><a href=\"#5-3-然后选择我们刚刚在github上创建的项目\" class=\"headerlink\" title=\"5.3 然后选择我们刚刚在github上创建的项目\"></a>5.3 然后选择我们刚刚在github上创建的项目</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-choose-project.png\" alt=\"选择项目\"></p>\n<h4 id=\"5-4-选择对应的项目分支\"><a href=\"#5-4-选择对应的项目分支\" class=\"headerlink\" title=\"5.4 选择对应的项目分支\"></a>5.4 选择对应的项目分支</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-choose-branch.png\" alt=\"选择分支\"></p>\n<h4 id=\"5-5-接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\"><a href=\"#5-5-接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\" class=\"headerlink\" title=\"5.5 接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名\"></a>5.5 接着等一会，netlify会帮我们创建对应的网站，并生成其二级域名</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-created-site.png\" alt=\"创建成功\"></p>\n<h4 id=\"5-6-添加项目域名\"><a href=\"#5-6-添加项目域名\" class=\"headerlink\" title=\"5.6 添加项目域名\"></a>5.6 添加项目域名</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-edit-domain.png\" alt=\"配置域名\"></p>\n<h4 id=\"5-7-配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\"><a href=\"#5-7-配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\" class=\"headerlink\" title=\"5.7 配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录\"></a>5.7 配合下拉弹出的记录值，到域名注册服务商那边，对应配置记录</h4><p><img src=\"http://img.91temaichang.com/blog/netlify-edit-domain2.png\" alt=\"获取记录\"><br>对应登录阿里云控制台，找到域名，对应进入解析配置中心，并对应添加两条记录：<br><img src=\"http://img.91temaichang.com/blog/aliyun.png\" alt=\"阿里云DNS解析\"></p>\n<h4 id=\"5-8-解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\"><a href=\"#5-8-解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\" class=\"headerlink\" title=\"5.8 解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了\"></a>5.8 解析成功后，我们即可以直接使用自定义域名的方式，来直接访问到我们的blog了</h4><p><img src=\"http://img.91temaichang.com/blog/blog.png\" alt=\"配置后的访问\"></p>\n"},{"title":"javascript数据类型","author":"Zhenggl","date":"2021-03-08T09:59:24.000Z","cover_picture":"https://img.91temaichang.com/blog/js-data-type.jpg","_content":"\n***请注意：JS的数据类型有8种***\n\n### 一、JS数据类型的结构\n在ES5的时候，我们所知晓的数据类型有6种：`Number`、`String`、`Boolean`、`undefined`、`Null`、`object`。\nES6中新增一种Symbol，这种类型的对象永不相等，即使创建的时候传入相同的值，可以用来解决属性名冲突的问题，作为标记。\n谷歌67版本还出现了一种bigInt，是指安全存储、操作大整数。\n\n根据上面描述，我们可以整理出对应如下的结构图：\n![JS数据类型结构图](https://img.91temaichang.com/blog/js-data-type-struture.png)\n\n可以将js的8中数据类型拆分为3个大类：基本数据类型 + 对象类型 + 其他类型\n然后基本数据类型包含：`Number`、`String`、`Boolean`、`undefined`、`Null`，\n对象类型(object)包含：`function`、`array`、`date`\n\n### 二、实际场景下，容易混淆的情况\n#### 2.1 JS中typeof输入分别是什么\n\n1. typeof {} 与 typeof [] 输出的都是object；\n2. typeof console.info 输出的是function；\n\n*`有一点需要注意：NaN是Number中的一种，非Number`*\n\n`关于isNaN的注意点`\n1. 用isNaN()检测是否是非数值类型，如下图：\n![isNaN](https://img.91temaichang.com/blog/WX20210309-184249.png)\n2. Number('123') == NaN?，这里Number('123')输出的是123，123是不等于NaN的，因此为false\n\n### 三、如何判断数据类型？\n#### 3.1 上面有提及到\n#### 3.2 toString()\n函数作用：其他类型转成string的方法\n支持的数据类型有：number、boolean、string、object\n不支持的数据类型有：null、undefined\n#### 3.3 toLocalString()\n函数作用：将数组转成本地字符串\n\n![toLocalString](https://img.91temaichang.com/blog/WX20210309-185011.png)\n#### 3.4 检测数据类型的方法\n1. instanceof 操作符\n\n![instanceof 操作符](https://img.91temaichang.com/blog/WX20210309-185237.png)\n\n2. 对象的constructor属性\n\n![利用对象的contructor属性](https://img.91temaichang.com/blog/WX20210309-185616.png)\n\n3. Array.isArray()检查数据是否为数组\n\n![利用Array.isArray](https://img.91temaichang.com/blog/WX20210309-185747.png)\n\n### 四、null与undefined有什么区别？\nNull只有一个值，是null，一个不存在的对象；\nundefined只有一个值，是undefined，没有初始化，undefined是从null中派生出来的。\n简单理解就是：undefined是没有定义的，null就是定义了变量，但没有给变量赋值。\n### 五、== 与 === 有什么区别，一般在什么场景下使用？\n==：表示相同。比较的是物理地址，相当于比较两个对象的hashCode，肯定不相等的。类型不相同，值也可能相等。比如 '1' == 1 为true；\n===：表示严格相同，严格判断类型是否相同。\n\n### 六、总结：\n1. undefined类型，只有一个值，在使用var/let/const来声明变量但为对其进行初始化的时候，这个变量就是undefined;\n2. null类型，只有一个值，null表示一个空对象指针，这也就是为毛typeof null返回的是object的原因；\n3. Boolean类型，只有true/false两个值，true不一定等于1，false不一定等于0；\n4. Number类型，数字类型，表示数据的整数和浮点数\n5. String类型，字符串，可用单引号也可以用双引号表示，字符串不可改变(`一般任何的基本数据类型都是不可改变的`)，改变某个变量保存的字符串，首先要销毁原来的字符串，然后用另一个字符串来填充。\n6. Object类型， ES5中的对象其实就是一组数据和函数的集合体，对象可以通过new操作符来创建，创建object类型的实例并为其添加属性或方法，就可以自定义创建对象，如下：\n```javascript\n  let obj = new Object();\n```\nobject的每个实例都有以下属性和方法：\n\n| 属性名称 | 类型 | 作用 |\n| --- | --- | --- |\n| constructor | function | 保存着用于创建当前对象的函数，构造函数constructor就是object() |\n| hasOwnProperty(propertyName) | function | 用于检查给定的propertyName属性是否在当前对象实例中，而不是在他的原型中 |\n| isPrototypeOf(Object) | function | 用于检查传入的对象是否是对象原型 |\n| propertyIsEnumerable(propertyName) | function | 属性是否可被枚举，是否可以被使用for-in语句 |\n| toLocaleString() | function | 返回对象的执行环境地区字符串表示 |\n| toString() | function | 返回对象的字符串表示 |\n| valueOf() | function | 返回对象的字符串表示，通常与toString返回的一致 |\n","source":"_posts/js-basic-data-type.md","raw":"---\ntitle: javascript数据类型\nauthor: Zhenggl\ndate: 2021-03-08 17:59:24\ncategories:\n  - [前端, javascript, 基础]\ntags:\n  - javascript\n  - 基础概念\ncover_picture: https://img.91temaichang.com/blog/js-data-type.jpg\n---\n\n***请注意：JS的数据类型有8种***\n\n### 一、JS数据类型的结构\n在ES5的时候，我们所知晓的数据类型有6种：`Number`、`String`、`Boolean`、`undefined`、`Null`、`object`。\nES6中新增一种Symbol，这种类型的对象永不相等，即使创建的时候传入相同的值，可以用来解决属性名冲突的问题，作为标记。\n谷歌67版本还出现了一种bigInt，是指安全存储、操作大整数。\n\n根据上面描述，我们可以整理出对应如下的结构图：\n![JS数据类型结构图](https://img.91temaichang.com/blog/js-data-type-struture.png)\n\n可以将js的8中数据类型拆分为3个大类：基本数据类型 + 对象类型 + 其他类型\n然后基本数据类型包含：`Number`、`String`、`Boolean`、`undefined`、`Null`，\n对象类型(object)包含：`function`、`array`、`date`\n\n### 二、实际场景下，容易混淆的情况\n#### 2.1 JS中typeof输入分别是什么\n\n1. typeof {} 与 typeof [] 输出的都是object；\n2. typeof console.info 输出的是function；\n\n*`有一点需要注意：NaN是Number中的一种，非Number`*\n\n`关于isNaN的注意点`\n1. 用isNaN()检测是否是非数值类型，如下图：\n![isNaN](https://img.91temaichang.com/blog/WX20210309-184249.png)\n2. Number('123') == NaN?，这里Number('123')输出的是123，123是不等于NaN的，因此为false\n\n### 三、如何判断数据类型？\n#### 3.1 上面有提及到\n#### 3.2 toString()\n函数作用：其他类型转成string的方法\n支持的数据类型有：number、boolean、string、object\n不支持的数据类型有：null、undefined\n#### 3.3 toLocalString()\n函数作用：将数组转成本地字符串\n\n![toLocalString](https://img.91temaichang.com/blog/WX20210309-185011.png)\n#### 3.4 检测数据类型的方法\n1. instanceof 操作符\n\n![instanceof 操作符](https://img.91temaichang.com/blog/WX20210309-185237.png)\n\n2. 对象的constructor属性\n\n![利用对象的contructor属性](https://img.91temaichang.com/blog/WX20210309-185616.png)\n\n3. Array.isArray()检查数据是否为数组\n\n![利用Array.isArray](https://img.91temaichang.com/blog/WX20210309-185747.png)\n\n### 四、null与undefined有什么区别？\nNull只有一个值，是null，一个不存在的对象；\nundefined只有一个值，是undefined，没有初始化，undefined是从null中派生出来的。\n简单理解就是：undefined是没有定义的，null就是定义了变量，但没有给变量赋值。\n### 五、== 与 === 有什么区别，一般在什么场景下使用？\n==：表示相同。比较的是物理地址，相当于比较两个对象的hashCode，肯定不相等的。类型不相同，值也可能相等。比如 '1' == 1 为true；\n===：表示严格相同，严格判断类型是否相同。\n\n### 六、总结：\n1. undefined类型，只有一个值，在使用var/let/const来声明变量但为对其进行初始化的时候，这个变量就是undefined;\n2. null类型，只有一个值，null表示一个空对象指针，这也就是为毛typeof null返回的是object的原因；\n3. Boolean类型，只有true/false两个值，true不一定等于1，false不一定等于0；\n4. Number类型，数字类型，表示数据的整数和浮点数\n5. String类型，字符串，可用单引号也可以用双引号表示，字符串不可改变(`一般任何的基本数据类型都是不可改变的`)，改变某个变量保存的字符串，首先要销毁原来的字符串，然后用另一个字符串来填充。\n6. Object类型， ES5中的对象其实就是一组数据和函数的集合体，对象可以通过new操作符来创建，创建object类型的实例并为其添加属性或方法，就可以自定义创建对象，如下：\n```javascript\n  let obj = new Object();\n```\nobject的每个实例都有以下属性和方法：\n\n| 属性名称 | 类型 | 作用 |\n| --- | --- | --- |\n| constructor | function | 保存着用于创建当前对象的函数，构造函数constructor就是object() |\n| hasOwnProperty(propertyName) | function | 用于检查给定的propertyName属性是否在当前对象实例中，而不是在他的原型中 |\n| isPrototypeOf(Object) | function | 用于检查传入的对象是否是对象原型 |\n| propertyIsEnumerable(propertyName) | function | 属性是否可被枚举，是否可以被使用for-in语句 |\n| toLocaleString() | function | 返回对象的执行环境地区字符串表示 |\n| toString() | function | 返回对象的字符串表示 |\n| valueOf() | function | 返回对象的字符串表示，通常与toString返回的一致 |\n","slug":"js-basic-data-type","published":1,"updated":"2021-03-09T11:21:41.207Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98uev000bin09cyax0ani","content":"<p><em><strong>请注意：JS的数据类型有8种</strong></em></p>\n<h3 id=\"一、JS数据类型的结构\"><a href=\"#一、JS数据类型的结构\" class=\"headerlink\" title=\"一、JS数据类型的结构\"></a>一、JS数据类型的结构</h3><p>在ES5的时候，我们所知晓的数据类型有6种：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>undefined</code>、<code>Null</code>、<code>object</code>。<br>ES6中新增一种Symbol，这种类型的对象永不相等，即使创建的时候传入相同的值，可以用来解决属性名冲突的问题，作为标记。<br>谷歌67版本还出现了一种bigInt，是指安全存储、操作大整数。</p>\n<p>根据上面描述，我们可以整理出对应如下的结构图：<br><img src=\"https://img.91temaichang.com/blog/js-data-type-struture.png\" alt=\"JS数据类型结构图\"></p>\n<p>可以将js的8中数据类型拆分为3个大类：基本数据类型 + 对象类型 + 其他类型<br>然后基本数据类型包含：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>undefined</code>、<code>Null</code>，<br>对象类型(object)包含：<code>function</code>、<code>array</code>、<code>date</code></p>\n<h3 id=\"二、实际场景下，容易混淆的情况\"><a href=\"#二、实际场景下，容易混淆的情况\" class=\"headerlink\" title=\"二、实际场景下，容易混淆的情况\"></a>二、实际场景下，容易混淆的情况</h3><h4 id=\"2-1-JS中typeof输入分别是什么\"><a href=\"#2-1-JS中typeof输入分别是什么\" class=\"headerlink\" title=\"2.1 JS中typeof输入分别是什么\"></a>2.1 JS中typeof输入分别是什么</h4><ol>\n<li>typeof {} 与 typeof [] 输出的都是object；</li>\n<li>typeof console.info 输出的是function；</li>\n</ol>\n<p><em><code>有一点需要注意：NaN是Number中的一种，非Number</code></em></p>\n<p><code>关于isNaN的注意点</code></p>\n<ol>\n<li>用isNaN()检测是否是非数值类型，如下图：<br><img src=\"https://img.91temaichang.com/blog/WX20210309-184249.png\" alt=\"isNaN\"></li>\n<li>Number(‘123’) == NaN?，这里Number(‘123’)输出的是123，123是不等于NaN的，因此为false</li>\n</ol>\n<h3 id=\"三、如何判断数据类型？\"><a href=\"#三、如何判断数据类型？\" class=\"headerlink\" title=\"三、如何判断数据类型？\"></a>三、如何判断数据类型？</h3><h4 id=\"3-1-上面有提及到\"><a href=\"#3-1-上面有提及到\" class=\"headerlink\" title=\"3.1 上面有提及到\"></a>3.1 上面有提及到</h4><h4 id=\"3-2-toString\"><a href=\"#3-2-toString\" class=\"headerlink\" title=\"3.2 toString()\"></a>3.2 toString()</h4><p>函数作用：其他类型转成string的方法<br>支持的数据类型有：number、boolean、string、object<br>不支持的数据类型有：null、undefined</p>\n<h4 id=\"3-3-toLocalString\"><a href=\"#3-3-toLocalString\" class=\"headerlink\" title=\"3.3 toLocalString()\"></a>3.3 toLocalString()</h4><p>函数作用：将数组转成本地字符串</p>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185011.png\" alt=\"toLocalString\"></p>\n<h4 id=\"3-4-检测数据类型的方法\"><a href=\"#3-4-检测数据类型的方法\" class=\"headerlink\" title=\"3.4 检测数据类型的方法\"></a>3.4 检测数据类型的方法</h4><ol>\n<li>instanceof 操作符</li>\n</ol>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185237.png\" alt=\"instanceof 操作符\"></p>\n<ol start=\"2\">\n<li>对象的constructor属性</li>\n</ol>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185616.png\" alt=\"利用对象的contructor属性\"></p>\n<ol start=\"3\">\n<li>Array.isArray()检查数据是否为数组</li>\n</ol>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185747.png\" alt=\"利用Array.isArray\"></p>\n<h3 id=\"四、null与undefined有什么区别？\"><a href=\"#四、null与undefined有什么区别？\" class=\"headerlink\" title=\"四、null与undefined有什么区别？\"></a>四、null与undefined有什么区别？</h3><p>Null只有一个值，是null，一个不存在的对象；<br>undefined只有一个值，是undefined，没有初始化，undefined是从null中派生出来的。<br>简单理解就是：undefined是没有定义的，null就是定义了变量，但没有给变量赋值。</p>\n<h3 id=\"五、-与-有什么区别，一般在什么场景下使用？\"><a href=\"#五、-与-有什么区别，一般在什么场景下使用？\" class=\"headerlink\" title=\"五、== 与 === 有什么区别，一般在什么场景下使用？\"></a>五、== 与 === 有什么区别，一般在什么场景下使用？</h3><p>==：表示相同。比较的是物理地址，相当于比较两个对象的hashCode，肯定不相等的。类型不相同，值也可能相等。比如 ‘1’ == 1 为true；<br>===：表示严格相同，严格判断类型是否相同。</p>\n<h3 id=\"六、总结：\"><a href=\"#六、总结：\" class=\"headerlink\" title=\"六、总结：\"></a>六、总结：</h3><ol>\n<li>undefined类型，只有一个值，在使用var/let/const来声明变量但为对其进行初始化的时候，这个变量就是undefined;</li>\n<li>null类型，只有一个值，null表示一个空对象指针，这也就是为毛typeof null返回的是object的原因；</li>\n<li>Boolean类型，只有true/false两个值，true不一定等于1，false不一定等于0；</li>\n<li>Number类型，数字类型，表示数据的整数和浮点数</li>\n<li>String类型，字符串，可用单引号也可以用双引号表示，字符串不可改变(<code>一般任何的基本数据类型都是不可改变的</code>)，改变某个变量保存的字符串，首先要销毁原来的字符串，然后用另一个字符串来填充。</li>\n<li>Object类型， ES5中的对象其实就是一组数据和函数的集合体，对象可以通过new操作符来创建，创建object类型的实例并为其添加属性或方法，就可以自定义创建对象，如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\nobject的每个实例都有以下属性和方法：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>function</td>\n<td>保存着用于创建当前对象的函数，构造函数constructor就是object()</td>\n</tr>\n<tr>\n<td>hasOwnProperty(propertyName)</td>\n<td>function</td>\n<td>用于检查给定的propertyName属性是否在当前对象实例中，而不是在他的原型中</td>\n</tr>\n<tr>\n<td>isPrototypeOf(Object)</td>\n<td>function</td>\n<td>用于检查传入的对象是否是对象原型</td>\n</tr>\n<tr>\n<td>propertyIsEnumerable(propertyName)</td>\n<td>function</td>\n<td>属性是否可被枚举，是否可以被使用for-in语句</td>\n</tr>\n<tr>\n<td>toLocaleString()</td>\n<td>function</td>\n<td>返回对象的执行环境地区字符串表示</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td>function</td>\n<td>返回对象的字符串表示</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>function</td>\n<td>返回对象的字符串表示，通常与toString返回的一致</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p><em><strong>请注意：JS的数据类型有8种</strong></em></p>\n<h3 id=\"一、JS数据类型的结构\"><a href=\"#一、JS数据类型的结构\" class=\"headerlink\" title=\"一、JS数据类型的结构\"></a>一、JS数据类型的结构</h3><p>在ES5的时候，我们所知晓的数据类型有6种：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>undefined</code>、<code>Null</code>、<code>object</code>。<br>ES6中新增一种Symbol，这种类型的对象永不相等，即使创建的时候传入相同的值，可以用来解决属性名冲突的问题，作为标记。<br>谷歌67版本还出现了一种bigInt，是指安全存储、操作大整数。</p>\n<p>根据上面描述，我们可以整理出对应如下的结构图：<br><img src=\"https://img.91temaichang.com/blog/js-data-type-struture.png\" alt=\"JS数据类型结构图\"></p>\n<p>可以将js的8中数据类型拆分为3个大类：基本数据类型 + 对象类型 + 其他类型<br>然后基本数据类型包含：<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>undefined</code>、<code>Null</code>，<br>对象类型(object)包含：<code>function</code>、<code>array</code>、<code>date</code></p>\n<h3 id=\"二、实际场景下，容易混淆的情况\"><a href=\"#二、实际场景下，容易混淆的情况\" class=\"headerlink\" title=\"二、实际场景下，容易混淆的情况\"></a>二、实际场景下，容易混淆的情况</h3><h4 id=\"2-1-JS中typeof输入分别是什么\"><a href=\"#2-1-JS中typeof输入分别是什么\" class=\"headerlink\" title=\"2.1 JS中typeof输入分别是什么\"></a>2.1 JS中typeof输入分别是什么</h4><ol>\n<li>typeof {} 与 typeof [] 输出的都是object；</li>\n<li>typeof console.info 输出的是function；</li>\n</ol>\n<p><em><code>有一点需要注意：NaN是Number中的一种，非Number</code></em></p>\n<p><code>关于isNaN的注意点</code></p>\n<ol>\n<li>用isNaN()检测是否是非数值类型，如下图：<br><img src=\"https://img.91temaichang.com/blog/WX20210309-184249.png\" alt=\"isNaN\"></li>\n<li>Number(‘123’) == NaN?，这里Number(‘123’)输出的是123，123是不等于NaN的，因此为false</li>\n</ol>\n<h3 id=\"三、如何判断数据类型？\"><a href=\"#三、如何判断数据类型？\" class=\"headerlink\" title=\"三、如何判断数据类型？\"></a>三、如何判断数据类型？</h3><h4 id=\"3-1-上面有提及到\"><a href=\"#3-1-上面有提及到\" class=\"headerlink\" title=\"3.1 上面有提及到\"></a>3.1 上面有提及到</h4><h4 id=\"3-2-toString\"><a href=\"#3-2-toString\" class=\"headerlink\" title=\"3.2 toString()\"></a>3.2 toString()</h4><p>函数作用：其他类型转成string的方法<br>支持的数据类型有：number、boolean、string、object<br>不支持的数据类型有：null、undefined</p>\n<h4 id=\"3-3-toLocalString\"><a href=\"#3-3-toLocalString\" class=\"headerlink\" title=\"3.3 toLocalString()\"></a>3.3 toLocalString()</h4><p>函数作用：将数组转成本地字符串</p>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185011.png\" alt=\"toLocalString\"></p>\n<h4 id=\"3-4-检测数据类型的方法\"><a href=\"#3-4-检测数据类型的方法\" class=\"headerlink\" title=\"3.4 检测数据类型的方法\"></a>3.4 检测数据类型的方法</h4><ol>\n<li>instanceof 操作符</li>\n</ol>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185237.png\" alt=\"instanceof 操作符\"></p>\n<ol start=\"2\">\n<li>对象的constructor属性</li>\n</ol>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185616.png\" alt=\"利用对象的contructor属性\"></p>\n<ol start=\"3\">\n<li>Array.isArray()检查数据是否为数组</li>\n</ol>\n<p><img src=\"https://img.91temaichang.com/blog/WX20210309-185747.png\" alt=\"利用Array.isArray\"></p>\n<h3 id=\"四、null与undefined有什么区别？\"><a href=\"#四、null与undefined有什么区别？\" class=\"headerlink\" title=\"四、null与undefined有什么区别？\"></a>四、null与undefined有什么区别？</h3><p>Null只有一个值，是null，一个不存在的对象；<br>undefined只有一个值，是undefined，没有初始化，undefined是从null中派生出来的。<br>简单理解就是：undefined是没有定义的，null就是定义了变量，但没有给变量赋值。</p>\n<h3 id=\"五、-与-有什么区别，一般在什么场景下使用？\"><a href=\"#五、-与-有什么区别，一般在什么场景下使用？\" class=\"headerlink\" title=\"五、== 与 === 有什么区别，一般在什么场景下使用？\"></a>五、== 与 === 有什么区别，一般在什么场景下使用？</h3><p>==：表示相同。比较的是物理地址，相当于比较两个对象的hashCode，肯定不相等的。类型不相同，值也可能相等。比如 ‘1’ == 1 为true；<br>===：表示严格相同，严格判断类型是否相同。</p>\n<h3 id=\"六、总结：\"><a href=\"#六、总结：\" class=\"headerlink\" title=\"六、总结：\"></a>六、总结：</h3><ol>\n<li>undefined类型，只有一个值，在使用var/let/const来声明变量但为对其进行初始化的时候，这个变量就是undefined;</li>\n<li>null类型，只有一个值，null表示一个空对象指针，这也就是为毛typeof null返回的是object的原因；</li>\n<li>Boolean类型，只有true/false两个值，true不一定等于1，false不一定等于0；</li>\n<li>Number类型，数字类型，表示数据的整数和浮点数</li>\n<li>String类型，字符串，可用单引号也可以用双引号表示，字符串不可改变(<code>一般任何的基本数据类型都是不可改变的</code>)，改变某个变量保存的字符串，首先要销毁原来的字符串，然后用另一个字符串来填充。</li>\n<li>Object类型， ES5中的对象其实就是一组数据和函数的集合体，对象可以通过new操作符来创建，创建object类型的实例并为其添加属性或方法，就可以自定义创建对象，如下：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br></pre></td></tr></table></figure>\nobject的每个实例都有以下属性和方法：</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>属性名称</th>\n<th>类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>constructor</td>\n<td>function</td>\n<td>保存着用于创建当前对象的函数，构造函数constructor就是object()</td>\n</tr>\n<tr>\n<td>hasOwnProperty(propertyName)</td>\n<td>function</td>\n<td>用于检查给定的propertyName属性是否在当前对象实例中，而不是在他的原型中</td>\n</tr>\n<tr>\n<td>isPrototypeOf(Object)</td>\n<td>function</td>\n<td>用于检查传入的对象是否是对象原型</td>\n</tr>\n<tr>\n<td>propertyIsEnumerable(propertyName)</td>\n<td>function</td>\n<td>属性是否可被枚举，是否可以被使用for-in语句</td>\n</tr>\n<tr>\n<td>toLocaleString()</td>\n<td>function</td>\n<td>返回对象的执行环境地区字符串表示</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td>function</td>\n<td>返回对象的字符串表示</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>function</td>\n<td>返回对象的字符串表示，通常与toString返回的一致</td>\n</tr>\n</tbody></table>\n"},{"title":"setTimeout与setInterval","author":"Zhenggl","date":"2021-03-10T08:20:55.000Z","_content":"###  一、setTimeout和setInterval的基本用法\n    1. 指定延迟XX秒后执行函数；\n    2. 指定周期来执行函数；\n 有以下一个场景情况：\n ```javascript\n function func(i){\n\tfor(let i = 0; i < 5; i ++){\n\t\tconsole.info(`xxx=${i}`);\n\t}\n}\n setInterval(function (){\n\tfunc(10);\n}, 100);\n ```\n上面这个代码块，每隔100毫秒执行func函数，如果func函数的执行时间少于100毫秒的话，则下一个100毫秒都能够执行到func，执行的示意图如下：\n\n![正常的setInterval](https://img.91temaichang.com/blog/interval1.png)\n\n","source":"_posts/setTimeout-setInterval.md","raw":"---\ntitle: setTimeout与setInterval\nauthor: Zhenggl\ndate: 2021-03-10 16:20:55\ncategories:\n  - [前端, javascript]\ntags:\n  - javascript\n  - 基础概念\n---\n###  一、setTimeout和setInterval的基本用法\n    1. 指定延迟XX秒后执行函数；\n    2. 指定周期来执行函数；\n 有以下一个场景情况：\n ```javascript\n function func(i){\n\tfor(let i = 0; i < 5; i ++){\n\t\tconsole.info(`xxx=${i}`);\n\t}\n}\n setInterval(function (){\n\tfunc(10);\n}, 100);\n ```\n上面这个代码块，每隔100毫秒执行func函数，如果func函数的执行时间少于100毫秒的话，则下一个100毫秒都能够执行到func，执行的示意图如下：\n\n![正常的setInterval](https://img.91temaichang.com/blog/interval1.png)\n\n","slug":"setTimeout-setInterval","published":1,"updated":"2021-03-10T08:34:20.212Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98uex000cin099sus9tt9","content":"<h3 id=\"一、setTimeout和setInterval的基本用法\"><a href=\"#一、setTimeout和setInterval的基本用法\" class=\"headerlink\" title=\"一、setTimeout和setInterval的基本用法\"></a>一、setTimeout和setInterval的基本用法</h3><pre><code>1. 指定延迟XX秒后执行函数；\n2. 指定周期来执行函数；\n</code></pre>\n<p> 有以下一个场景情况：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">`xxx=<span class=\"subst\">$&#123;i&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure><br>上面这个代码块，每隔100毫秒执行func函数，如果func函数的执行时间少于100毫秒的话，则下一个100毫秒都能够执行到func，执行的示意图如下：</p>\n<p><img src=\"https://img.91temaichang.com/blog/interval1.png\" alt=\"正常的setInterval\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"一、setTimeout和setInterval的基本用法\"><a href=\"#一、setTimeout和setInterval的基本用法\" class=\"headerlink\" title=\"一、setTimeout和setInterval的基本用法\"></a>一、setTimeout和setInterval的基本用法</h3><pre><code>1. 指定延迟XX秒后执行函数；\n2. 指定周期来执行函数；\n</code></pre>\n<p> 有以下一个场景情况：<br> <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">i</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i ++)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.info(<span class=\"string\">`xxx=<span class=\"subst\">$&#123;i&#125;</span>`</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\tfunc(<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;, <span class=\"number\">100</span>);</span><br></pre></td></tr></table></figure><br>上面这个代码块，每隔100毫秒执行func函数，如果func函数的执行时间少于100毫秒的话，则下一个100毫秒都能够执行到func，执行的示意图如下：</p>\n<p><img src=\"https://img.91temaichang.com/blog/interval1.png\" alt=\"正常的setInterval\"></p>\n"},{"title":"通过verdaccio服务搭建内部npm管理","author":"Zhenggl","date":"2021-03-08T06:17:01.000Z","cover_picture":"https://img.91temaichang.com/blog/verdaccio.jpeg","_content":"\n*关于如何要共享组件？目前公司的前端项目比较多，涉及到中后台业务系统，有存在不少组件，在不同的业务系统中使用的，为了避免疯狂的ctrl +C > ctrl + V，一堆的维护工作，这边搭建了内部的私有源，又不能将公司的一个资源扔到公共的npm上，因此这边利用verdaccio + gitlab来搭建以及维护蜘点前端公共的组件服务，通过verdaccio来管理组件的上传以及可视化管理，gitlab来管理组件的版本以及迭代，满足组件的更新迭代；*\n### 一、为啥子要使用私有源呢\n\n1. 加快共有npm包的安装速度；\n2. 避免本地npm install指向源，避免cnpm等其他源拉取npm包不及时的问题；\n3. 私有源会将已经使用的npm包缓存下来，提升个人本地/打包环境npm包的安装速度；\n4. 把公共代码上传到私有源，可以在多个git仓库项目中通过npm的方式来使用；\n5. A仓库 封装了一个 video组件，想给B仓库使用。那就可以制作一个 video组件仓库，然后发布到 私有源上。A和B仓库使用的时候就 npm install 组件库，let api = require('组件库') 啦~ 这个步骤和 发公有npm包是一模一样的，只是发的位置不一样而已。\n\n### 二、通过verdaccio服务，搭建内部npm管理\n\n1. 访问[verdaccio官网](https://verdaccio.org/docs/zh-CN/authentification)按照这个一步一步来就行\n2. 如果是本地电脑 不需要改 verdaccio的 config.yaml配置文件，如果是服务器部署，那你需要改 config.yaml的配置\n3. 我们这里按服务器部署为例子\n4. 你需要先安装上 ```shell node npm pm2```\n5. ```shell npm install -g verdaccio```\n6. 创建一个 非root的账户\n7. 在此账户下 执行verdaccio，且找到 config.yaml文件\n8. 要在内部机器上运行，因此，需要这是局域网访问，vim修改config.yaml，新增一行，保存：\n```shell\nlisten: 0.0.0.0:4873\n```\nverdaccis 跑一下，显示一下内容就正常了；\n![verdaccio效果图](https://img.91temaichang.com/blogimage2021-1-18%2017_8_18.png)\n\n### 三、日常使用–切换npm源\n\n1. 由于内部npm也是使用的npm来管理，因此，需要一专门的工具，来管理源的切换；\n2. 打开命令行工具，安装npm切换源的快捷工具npm/nrm：```shell npm install -g nrm```\n3. 输入命令：```shell nrm ls```，可以看到以下截图，前面有个小星星的，代表当前源是指向哪里的\n4. 输入命令：```shell nrm add``` 源名称 源地址，创建一个新的源\n5. 输入命令：```shell nrm use``` 源名字，切换使用的源\n![nrm 切换源](https://img.91temaichang.com/blog/image2021-1-18%2017_11_37.png)\n\n### 四、日常使用\n\n1. 切换使用的源；\n2. 通过npm安装依赖即可；\n\n### 结束\n至此，整个内部npm的使用以及发布就已经全部说明完成了，无论团队的开发者/使用者来说，只要用nrm将源切换为私有源就可以了。\nverdaccio通过代理的形式，把私有包和官方包且分开；\n![内部npm管理示意图](https://img.91temaichang.com/blog/6622941-aa413cf524c5fa90.png)\n","source":"_posts/verdaccio-custom-npm.md","raw":"---\ntitle: 通过verdaccio服务搭建内部npm管理\nauthor: Zhenggl\ndate: 2021-03-08 14:17:01\ncategories:\n  - [积累与沉淀,自定义服务]\ntags:\n  - verdaccio\n  - npm\n  - nrm\n  - Node.js\ncover_picture: https://img.91temaichang.com/blog/verdaccio.jpeg\n---\n\n*关于如何要共享组件？目前公司的前端项目比较多，涉及到中后台业务系统，有存在不少组件，在不同的业务系统中使用的，为了避免疯狂的ctrl +C > ctrl + V，一堆的维护工作，这边搭建了内部的私有源，又不能将公司的一个资源扔到公共的npm上，因此这边利用verdaccio + gitlab来搭建以及维护蜘点前端公共的组件服务，通过verdaccio来管理组件的上传以及可视化管理，gitlab来管理组件的版本以及迭代，满足组件的更新迭代；*\n### 一、为啥子要使用私有源呢\n\n1. 加快共有npm包的安装速度；\n2. 避免本地npm install指向源，避免cnpm等其他源拉取npm包不及时的问题；\n3. 私有源会将已经使用的npm包缓存下来，提升个人本地/打包环境npm包的安装速度；\n4. 把公共代码上传到私有源，可以在多个git仓库项目中通过npm的方式来使用；\n5. A仓库 封装了一个 video组件，想给B仓库使用。那就可以制作一个 video组件仓库，然后发布到 私有源上。A和B仓库使用的时候就 npm install 组件库，let api = require('组件库') 啦~ 这个步骤和 发公有npm包是一模一样的，只是发的位置不一样而已。\n\n### 二、通过verdaccio服务，搭建内部npm管理\n\n1. 访问[verdaccio官网](https://verdaccio.org/docs/zh-CN/authentification)按照这个一步一步来就行\n2. 如果是本地电脑 不需要改 verdaccio的 config.yaml配置文件，如果是服务器部署，那你需要改 config.yaml的配置\n3. 我们这里按服务器部署为例子\n4. 你需要先安装上 ```shell node npm pm2```\n5. ```shell npm install -g verdaccio```\n6. 创建一个 非root的账户\n7. 在此账户下 执行verdaccio，且找到 config.yaml文件\n8. 要在内部机器上运行，因此，需要这是局域网访问，vim修改config.yaml，新增一行，保存：\n```shell\nlisten: 0.0.0.0:4873\n```\nverdaccis 跑一下，显示一下内容就正常了；\n![verdaccio效果图](https://img.91temaichang.com/blogimage2021-1-18%2017_8_18.png)\n\n### 三、日常使用–切换npm源\n\n1. 由于内部npm也是使用的npm来管理，因此，需要一专门的工具，来管理源的切换；\n2. 打开命令行工具，安装npm切换源的快捷工具npm/nrm：```shell npm install -g nrm```\n3. 输入命令：```shell nrm ls```，可以看到以下截图，前面有个小星星的，代表当前源是指向哪里的\n4. 输入命令：```shell nrm add``` 源名称 源地址，创建一个新的源\n5. 输入命令：```shell nrm use``` 源名字，切换使用的源\n![nrm 切换源](https://img.91temaichang.com/blog/image2021-1-18%2017_11_37.png)\n\n### 四、日常使用\n\n1. 切换使用的源；\n2. 通过npm安装依赖即可；\n\n### 结束\n至此，整个内部npm的使用以及发布就已经全部说明完成了，无论团队的开发者/使用者来说，只要用nrm将源切换为私有源就可以了。\nverdaccio通过代理的形式，把私有包和官方包且分开；\n![内部npm管理示意图](https://img.91temaichang.com/blog/6622941-aa413cf524c5fa90.png)\n","slug":"verdaccio-custom-npm","published":1,"updated":"2021-03-08T07:07:51.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckma98uez000fin096ijwbznz","content":"<p><em>关于如何要共享组件？目前公司的前端项目比较多，涉及到中后台业务系统，有存在不少组件，在不同的业务系统中使用的，为了避免疯狂的ctrl +C &gt; ctrl + V，一堆的维护工作，这边搭建了内部的私有源，又不能将公司的一个资源扔到公共的npm上，因此这边利用verdaccio + gitlab来搭建以及维护蜘点前端公共的组件服务，通过verdaccio来管理组件的上传以及可视化管理，gitlab来管理组件的版本以及迭代，满足组件的更新迭代；</em></p>\n<h3 id=\"一、为啥子要使用私有源呢\"><a href=\"#一、为啥子要使用私有源呢\" class=\"headerlink\" title=\"一、为啥子要使用私有源呢\"></a>一、为啥子要使用私有源呢</h3><ol>\n<li>加快共有npm包的安装速度；</li>\n<li>避免本地npm install指向源，避免cnpm等其他源拉取npm包不及时的问题；</li>\n<li>私有源会将已经使用的npm包缓存下来，提升个人本地/打包环境npm包的安装速度；</li>\n<li>把公共代码上传到私有源，可以在多个git仓库项目中通过npm的方式来使用；</li>\n<li>A仓库 封装了一个 video组件，想给B仓库使用。那就可以制作一个 video组件仓库，然后发布到 私有源上。A和B仓库使用的时候就 npm install 组件库，let api = require(‘组件库’) 啦~ 这个步骤和 发公有npm包是一模一样的，只是发的位置不一样而已。</li>\n</ol>\n<h3 id=\"二、通过verdaccio服务，搭建内部npm管理\"><a href=\"#二、通过verdaccio服务，搭建内部npm管理\" class=\"headerlink\" title=\"二、通过verdaccio服务，搭建内部npm管理\"></a>二、通过verdaccio服务，搭建内部npm管理</h3><ol>\n<li>访问<a href=\"https://verdaccio.org/docs/zh-CN/authentification\">verdaccio官网</a>按照这个一步一步来就行</li>\n<li>如果是本地电脑 不需要改 verdaccio的 config.yaml配置文件，如果是服务器部署，那你需要改 config.yaml的配置</li>\n<li>我们这里按服务器部署为例子</li>\n<li>你需要先安装上 <code>shell node npm pm2</code></li>\n<li><code>shell npm install -g verdaccio</code></li>\n<li>创建一个 非root的账户</li>\n<li>在此账户下 执行verdaccio，且找到 config.yaml文件</li>\n<li>要在内部机器上运行，因此，需要这是局域网访问，vim修改config.yaml，新增一行，保存：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen: 0.0.0.0:4873</span><br></pre></td></tr></table></figure>\nverdaccis 跑一下，显示一下内容就正常了；<br><img src=\"https://img.91temaichang.com/blogimage2021-1-18%2017_8_18.png\" alt=\"verdaccio效果图\"></li>\n</ol>\n<h3 id=\"三、日常使用–切换npm源\"><a href=\"#三、日常使用–切换npm源\" class=\"headerlink\" title=\"三、日常使用–切换npm源\"></a>三、日常使用–切换npm源</h3><ol>\n<li>由于内部npm也是使用的npm来管理，因此，需要一专门的工具，来管理源的切换；</li>\n<li>打开命令行工具，安装npm切换源的快捷工具npm/nrm：<code>shell npm install -g nrm</code></li>\n<li>输入命令：<code>shell nrm ls</code>，可以看到以下截图，前面有个小星星的，代表当前源是指向哪里的</li>\n<li>输入命令：<code>shell nrm add</code> 源名称 源地址，创建一个新的源</li>\n<li>输入命令：<code>shell nrm use</code> 源名字，切换使用的源<br><img src=\"https://img.91temaichang.com/blog/image2021-1-18%2017_11_37.png\" alt=\"nrm 切换源\"></li>\n</ol>\n<h3 id=\"四、日常使用\"><a href=\"#四、日常使用\" class=\"headerlink\" title=\"四、日常使用\"></a>四、日常使用</h3><ol>\n<li>切换使用的源；</li>\n<li>通过npm安装依赖即可；</li>\n</ol>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>至此，整个内部npm的使用以及发布就已经全部说明完成了，无论团队的开发者/使用者来说，只要用nrm将源切换为私有源就可以了。<br>verdaccio通过代理的形式，把私有包和官方包且分开；<br><img src=\"https://img.91temaichang.com/blog/6622941-aa413cf524c5fa90.png\" alt=\"内部npm管理示意图\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>关于如何要共享组件？目前公司的前端项目比较多，涉及到中后台业务系统，有存在不少组件，在不同的业务系统中使用的，为了避免疯狂的ctrl +C &gt; ctrl + V，一堆的维护工作，这边搭建了内部的私有源，又不能将公司的一个资源扔到公共的npm上，因此这边利用verdaccio + gitlab来搭建以及维护蜘点前端公共的组件服务，通过verdaccio来管理组件的上传以及可视化管理，gitlab来管理组件的版本以及迭代，满足组件的更新迭代；</em></p>\n<h3 id=\"一、为啥子要使用私有源呢\"><a href=\"#一、为啥子要使用私有源呢\" class=\"headerlink\" title=\"一、为啥子要使用私有源呢\"></a>一、为啥子要使用私有源呢</h3><ol>\n<li>加快共有npm包的安装速度；</li>\n<li>避免本地npm install指向源，避免cnpm等其他源拉取npm包不及时的问题；</li>\n<li>私有源会将已经使用的npm包缓存下来，提升个人本地/打包环境npm包的安装速度；</li>\n<li>把公共代码上传到私有源，可以在多个git仓库项目中通过npm的方式来使用；</li>\n<li>A仓库 封装了一个 video组件，想给B仓库使用。那就可以制作一个 video组件仓库，然后发布到 私有源上。A和B仓库使用的时候就 npm install 组件库，let api = require(‘组件库’) 啦~ 这个步骤和 发公有npm包是一模一样的，只是发的位置不一样而已。</li>\n</ol>\n<h3 id=\"二、通过verdaccio服务，搭建内部npm管理\"><a href=\"#二、通过verdaccio服务，搭建内部npm管理\" class=\"headerlink\" title=\"二、通过verdaccio服务，搭建内部npm管理\"></a>二、通过verdaccio服务，搭建内部npm管理</h3><ol>\n<li>访问<a href=\"https://verdaccio.org/docs/zh-CN/authentification\">verdaccio官网</a>按照这个一步一步来就行</li>\n<li>如果是本地电脑 不需要改 verdaccio的 config.yaml配置文件，如果是服务器部署，那你需要改 config.yaml的配置</li>\n<li>我们这里按服务器部署为例子</li>\n<li>你需要先安装上 <code>shell node npm pm2</code></li>\n<li><code>shell npm install -g verdaccio</code></li>\n<li>创建一个 非root的账户</li>\n<li>在此账户下 执行verdaccio，且找到 config.yaml文件</li>\n<li>要在内部机器上运行，因此，需要这是局域网访问，vim修改config.yaml，新增一行，保存：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">listen: 0.0.0.0:4873</span><br></pre></td></tr></table></figure>\nverdaccis 跑一下，显示一下内容就正常了；<br><img src=\"https://img.91temaichang.com/blogimage2021-1-18%2017_8_18.png\" alt=\"verdaccio效果图\"></li>\n</ol>\n<h3 id=\"三、日常使用–切换npm源\"><a href=\"#三、日常使用–切换npm源\" class=\"headerlink\" title=\"三、日常使用–切换npm源\"></a>三、日常使用–切换npm源</h3><ol>\n<li>由于内部npm也是使用的npm来管理，因此，需要一专门的工具，来管理源的切换；</li>\n<li>打开命令行工具，安装npm切换源的快捷工具npm/nrm：<code>shell npm install -g nrm</code></li>\n<li>输入命令：<code>shell nrm ls</code>，可以看到以下截图，前面有个小星星的，代表当前源是指向哪里的</li>\n<li>输入命令：<code>shell nrm add</code> 源名称 源地址，创建一个新的源</li>\n<li>输入命令：<code>shell nrm use</code> 源名字，切换使用的源<br><img src=\"https://img.91temaichang.com/blog/image2021-1-18%2017_11_37.png\" alt=\"nrm 切换源\"></li>\n</ol>\n<h3 id=\"四、日常使用\"><a href=\"#四、日常使用\" class=\"headerlink\" title=\"四、日常使用\"></a>四、日常使用</h3><ol>\n<li>切换使用的源；</li>\n<li>通过npm安装依赖即可；</li>\n</ol>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>至此，整个内部npm的使用以及发布就已经全部说明完成了，无论团队的开发者/使用者来说，只要用nrm将源切换为私有源就可以了。<br>verdaccio通过代理的形式，把私有包和官方包且分开；<br><img src=\"https://img.91temaichang.com/blog/6622941-aa413cf524c5fa90.png\" alt=\"内部npm管理示意图\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckma98uej0001in092iva8uc6","category_id":"ckma98uer0005in09hj4v1l1g","_id":"ckma98uf6000pin09d0j255dg"},{"post_id":"ckma98uej0001in092iva8uc6","category_id":"ckma98uf2000gin09fyy259ql","_id":"ckma98uf6000qin09h2x25sg4"},{"post_id":"ckma98uen0002in09134p0y96","category_id":"ckma98uev0009in09boz3f5m1","_id":"ckma98uf80010in093fu7b5gu"},{"post_id":"ckma98uen0002in09134p0y96","category_id":"ckma98uf6000sin09csda0bab","_id":"ckma98uf80011in09a44eexbn"},{"post_id":"ckma98uex000cin099sus9tt9","category_id":"ckma98uer0005in09hj4v1l1g","_id":"ckma98uf90014in096stjfoh3"},{"post_id":"ckma98uex000cin099sus9tt9","category_id":"ckma98uf5000nin09fguxaj1o","_id":"ckma98uf90015in09130scgdp"},{"post_id":"ckma98uez000fin096ijwbznz","category_id":"ckma98uev0009in09boz3f5m1","_id":"ckma98ufa0018in09gapx5auj"},{"post_id":"ckma98uez000fin096ijwbznz","category_id":"ckma98uf8000xin099njihq5s","_id":"ckma98ufb001ain09fwbdfs9c"},{"post_id":"ckma98ueq0004in0977q852l6","category_id":"ckma98uer0005in09hj4v1l1g","_id":"ckma98ufb001ein09340la65a"},{"post_id":"ckma98ueq0004in0977q852l6","category_id":"ckma98uf5000nin09fguxaj1o","_id":"ckma98ufc001gin098w4o00b6"},{"post_id":"ckma98uet0007in09fipf4qhp","category_id":"ckma98uev0009in09boz3f5m1","_id":"ckma98ufc001hin09ach083bg"},{"post_id":"ckma98uet0007in09fipf4qhp","category_id":"ckma98uf8000xin099njihq5s","_id":"ckma98ufc001jin09flwo94iv"},{"post_id":"ckma98uev000bin09cyax0ani","category_id":"ckma98uer0005in09hj4v1l1g","_id":"ckma98ufd001kin09ee4k7v93"},{"post_id":"ckma98uev000bin09cyax0ani","category_id":"ckma98uf5000nin09fguxaj1o","_id":"ckma98ufd001nin09959g8ec9"},{"post_id":"ckma98uev000bin09cyax0ani","category_id":"ckma98ufb001bin09awlx4y6a","_id":"ckma98ufd001pin099h5uhrgl"}],"PostTag":[{"post_id":"ckma98uej0001in092iva8uc6","tag_id":"ckma98ueo0003in09b7k9dtvh","_id":"ckma98uev000ain09930eetd9"},{"post_id":"ckma98uen0002in09134p0y96","tag_id":"ckma98ueu0008in097qtzh2jz","_id":"ckma98uf4000kin09gfpx7lam"},{"post_id":"ckma98uen0002in09134p0y96","tag_id":"ckma98uex000din09auc4fpzs","_id":"ckma98uf5000lin09go422jd9"},{"post_id":"ckma98uen0002in09134p0y96","tag_id":"ckma98ueo0003in09b7k9dtvh","_id":"ckma98uf5000oin09bb138egm"},{"post_id":"ckma98ueq0004in0977q852l6","tag_id":"ckma98uex000din09auc4fpzs","_id":"ckma98uf7000vin091s653ewh"},{"post_id":"ckma98ueq0004in0977q852l6","tag_id":"ckma98uf5000min0994e12pdr","_id":"ckma98uf7000win090yvhg8t8"},{"post_id":"ckma98ueq0004in0977q852l6","tag_id":"ckma98uf6000rin09bsjh8tcq","_id":"ckma98uf8000zin09fvzl9jnn"},{"post_id":"ckma98ues0006in090xq67zty","tag_id":"ckma98uf7000tin09dugt8dzr","_id":"ckma98ufa0019in09crn37rgc"},{"post_id":"ckma98ues0006in090xq67zty","tag_id":"ckma98uf8000yin09dov8367t","_id":"ckma98ufb001cin096lir06o6"},{"post_id":"ckma98ues0006in090xq67zty","tag_id":"ckma98uf90013in09hwxghzos","_id":"ckma98ufb001fin090jo2939t"},{"post_id":"ckma98uet0007in09fipf4qhp","tag_id":"ckma98ufa0017in09a5y95spt","_id":"ckma98ufd001min09e2g9bkeb"},{"post_id":"ckma98uet0007in09fipf4qhp","tag_id":"ckma98ufb001din0958n26ydl","_id":"ckma98ufd001oin091ctd71wo"},{"post_id":"ckma98uet0007in09fipf4qhp","tag_id":"ckma98ufc001iin094b8hf0lo","_id":"ckma98ufe001rin09316ha9lc"},{"post_id":"ckma98uev000bin09cyax0ani","tag_id":"ckma98uex000din09auc4fpzs","_id":"ckma98ufe001tin0982r88uvt"},{"post_id":"ckma98uev000bin09cyax0ani","tag_id":"ckma98ufd001qin0999vc1n31","_id":"ckma98ufe001uin09clq58u6a"},{"post_id":"ckma98uex000cin099sus9tt9","tag_id":"ckma98uex000din09auc4fpzs","_id":"ckma98uff001xin09awva6tv8"},{"post_id":"ckma98uex000cin099sus9tt9","tag_id":"ckma98ufd001qin0999vc1n31","_id":"ckma98uff001yin09ewn3bm4q"},{"post_id":"ckma98uez000fin096ijwbznz","tag_id":"ckma98uff001win093xa08j3w","_id":"ckma98ufj0022in093laqca6x"},{"post_id":"ckma98uez000fin096ijwbznz","tag_id":"ckma98uf8000yin09dov8367t","_id":"ckma98ufj0023in093x355sxp"},{"post_id":"ckma98uez000fin096ijwbznz","tag_id":"ckma98ufg0020in092n1xdzbe","_id":"ckma98ufj0024in099f3u4t6e"},{"post_id":"ckma98uez000fin096ijwbznz","tag_id":"ckma98uf90013in09hwxghzos","_id":"ckma98ufj0025in097hi90aw1"}],"Tag":[{"name":"css","_id":"ckma98ueo0003in09b7k9dtvh"},{"name":"编码规范","_id":"ckma98ueu0008in097qtzh2jz"},{"name":"javascript","_id":"ckma98uex000din09auc4fpzs"},{"name":"基础","_id":"ckma98uf5000min0994e12pdr"},{"name":"function","_id":"ckma98uf6000rin09bsjh8tcq"},{"name":"Hexo","_id":"ckma98uf7000tin09dugt8dzr"},{"name":"npm","_id":"ckma98uf8000yin09dov8367t"},{"name":"Node.js","_id":"ckma98uf90013in09hwxghzos"},{"name":"hexo","_id":"ckma98ufa0017in09a5y95spt"},{"name":"github","_id":"ckma98ufb001din0958n26ydl"},{"name":"netlify","_id":"ckma98ufc001iin094b8hf0lo"},{"name":"基础概念","_id":"ckma98ufd001qin0999vc1n31"},{"name":"verdaccio","_id":"ckma98uff001win093xa08j3w"},{"name":"nrm","_id":"ckma98ufg0020in092n1xdzbe"}]}}